[{"content":"Bạn cảm thấy việc hệ thống hóa kiến thức về Lập trình Mạng, Java và JavaScript quá rời rạc và khó khăn? Có lẽ đã đến lúc bạn cần một tài liệu tham khảo có cấu trúc hơn.\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/","section":"Bài viết","summary":"","title":"Bài viết","type":"posts"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" Chào bạn! Hôm nay chúng ta sẽ khám phá một khái niệm nghe có vẻ phức tạp trong Java: Multithreading (lập trình đa luồng). Nhưng đừng lo, tôi sẽ giải thích nó theo cách đơn giản nhất, như thể bạn đang xem một bộ phim hoạt hình vậy. Đơn Luồng | Bạn Là Một Đầu Bếp Đơn Độc # Hãy hình dung bạn là một đầu bếp trong một nhà hàng nhỏ, và bạn phải làm tất cả mọi việc.\nKhi có khách gọi món, quy trình của bạn là:\nNhận đơn hàng.\nĐi vào bếp, chuẩn bị và nấu món ăn.\nMang món ăn ra cho khách.\nQuay lại bếp dọn dẹp.\nMọi thứ diễn ra tuần tự. Nếu có 3 bàn khách cùng gọi món, bạn phải làm xong cho bàn thứ nhất rồi mới đến bàn thứ hai, rồi mới đến bàn thứ ba. Các vị khách đến sau sẽ phải chờ dài cổ. Đây chính là cách một chương trình đơn luồng (single-thread) hoạt động. Nó chỉ làm được một việc tại một thời điểm.\nĐa Luồng | Bạn Tuyển Thêm Nhân Viên # Giờ thì nhà hàng của bạn phát đạt hơn. Bạn quyết định thuê thêm 2 phụ bếp nữa. Mọi chuyện bây giờ hoàn toàn khác:\nBạn (Đầu bếp chính): Chuyên nhận đơn hàng và giám sát.\nPhụ bếp A: Chuyên sơ chế nguyên liệu.\nPhụ bếp B: Chuyên nấu nướng và trình bày.\nKhi 3 bàn khách cùng gọi món, bạn có thể nhận cả 3 đơn gần như cùng lúc, phụ bếp A bắt đầu sơ chế ngay lập tức, và phụ bếp B thì nấu ngay khi có nguyên liệu. Mọi thứ diễn ra song song. Nhà hàng của bạn phục vụ nhanh hơn gấp nhiều lần.\nĐó chính là Multithreading!\nTóm lại: Một chương trình đa luồng giống như một nhà bếp có nhiều đầu bếp. Mỗi \u0026ldquo;đầu bếp\u0026rdquo; được gọi là một Thread (luồng). Toàn bộ chương trình (nhà hàng) có thể xử lý nhiều công việc (nấu nhiều món) cùng một lúc, giúp tăng hiệu suất và tốc độ đáng kể.\nLàm Sao Để \u0026ldquo;Thuê Phụ Bếp\u0026rdquo; (Tạo Thread) Trong Java? # Trong Java, bạn có thể \u0026ldquo;thuê phụ bếp\u0026rdquo; (tạo một thread) theo hai cách phổ biến.\nCách 1: \u0026ldquo;Truyền nhân\u0026rdquo; - Kế thừa từ lớp Thread Cách này giống như bạn dạy nghề cho con trai mình. Bạn tạo một lớp mới và cho nó \u0026ldquo;kế thừa\u0026rdquo; mọi kỹ năng của một Thread cha.\nCách làm:\nTạo một class mới kế thừa từ java.lang.Thread.\nGhi đè (override) phương thức run(). Đây là nơi bạn định nghĩa những việc mà \u0026ldquo;phụ bếp\u0026rdquo; này sẽ làm.\nĐể bắt đầu, bạn gọi phương thức start().\nVí dụ: Hãy tạo một \u0026ldquo;phụ bếp\u0026rdquo; có nhiệm vụ thái 5 củ cà rốt.\nJava\n// Phụ bếp này tên là KitchenHelper, được đào tạo từ lớp Thread cha class KitchenHelper extends Thread { private String name; public KitchenHelper(String name) { this.name = name; } // Đây là công việc của phụ bếp: thái cà rốt @Override public void run() { for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(this.name + \u0026#34; đã thái xong củ cà rốt thứ: \u0026#34; + i); try { // Giả vờ nghỉ 1 giây để thái củ tiếp theo Thread.sleep(1000); } catch (InterruptedException e) { // Xử lý nếu có lỗi } } } } public class Restaurant { public static void main(String[] args) { // Thuê 2 phụ bếp KitchenHelper helper1 = new KitchenHelper(\u0026#34;Tuấn\u0026#34;); KitchenHelper helper2 = new KitchenHelper(\u0026#34;Đình\u0026#34;); // Yêu cầu họ bắt đầu làm việc! helper1.start(); helper2.start(); } } Nếu bạn chạy đoạn code trên, bạn sẽ thấy Tuấn và Đình thái cà rốt xen kẽ nhau. Họ đang làm việc song song!\nCách 2: \u0026ldquo;Người làm thuê\u0026rdquo; - Implement interface Runnable\nCách này linh hoạt hơn. Thay vì tạo ra một \u0026ldquo;phụ bếp\u0026rdquo; chính hiệu, bạn chỉ cần viết ra một \u0026ldquo;bản mô tả công việc\u0026rdquo; (gọi là Runnable), rồi đưa bản mô tả này cho một Thread bất kỳ để họ thực hiện.\nĐây là cách được khuyến khích sử dụng nhiều hơn vì Java không cho kế thừa từ nhiều lớp, nên việc \u0026ldquo;implement\u0026rdquo; sẽ giúp code của bạn linh hoạt hơn.\nVí dụ: Cùng công việc thái 5 củ cà rốt.\nJava\n// Đây là \u0026#34;bản mô tả công việc\u0026#34; class TaskThaiCarrot implements Runnable { private String tenNguoiLam; public TaskThaiCarrot(String tenNguoiLam) { this.tenNguoiLam = tenNguoiLam; } // Công việc cần làm được viết ở đây @Override public void run() { for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(this.tenNguoiLam + \u0026#34; đang thực hiện công việc, củ thứ: \u0026#34; + i); try { Thread.sleep(1000); } catch (InterruptedException e) { // Xử lý lỗi } } } } public class Restaurant { public static void main(String[] args) { // Tạo ra 2 bản mô tả công việc TaskThaiCarrot task1 = new TaskThaiCarrot(\u0026#34;Nhiệm vụ của Tuấn\u0026#34;); TaskThaiCarrot task2 = new TaskThaiCarrot(\u0026#34;Nhiệm vụ của Đình\u0026#34;); // Thuê 2 \u0026#34;Thread\u0026#34; và giao việc cho họ Thread worker1 = new Thread(task1); Thread worker2 = new Thread(task2); // Bắt đầu làm việc worker1.start(); worker2.start(); } } Kết quả cũng tương tự, nhưng cách tổ chức code này gọn gàng và dễ mở rộng hơn.\nSynchronized: Khi Các Phụ Bếp Tranh Giành Một Cái Chảo # Quay lại căn bếp. Giả sử bạn chỉ có một cái chảo chống dính duy nhất. Cả Tuấn và Đình đều cần nó để chiên trứng.\nTình huống xấu:\nTuấn kiểm tra, thấy cái chảo đang rảnh.\nNgay lúc đó, Đình cũng kiểm tra, cũng thấy cái chảo rảnh.\nTuấn đặt chảo lên bếp và đập trứng vào.\nĐình không biết Tuấn vừa lấy, cũng chạy tới và đập trứng của mình vào cùng cái chảo đó.\nKết quả: Món trứng chiên hỗn loạn, không ra hình thù gì!\nVấn đề này trong lập trình gọi là Race Condition (Tranh chấp tài nguyên). Nó xảy ra khi nhiều luồng cùng truy cập và thay đổi một tài nguyên dùng chung (biến, đối tượng, file\u0026hellip;).\nGiải Pháp: \u0026ldquo;Ai Dùng Thì Khóa Lại\u0026rdquo; (Synchronized) 🔑 Để giải quyết, bạn ra quy định: \u0026ldquo;Ai muốn dùng cái chảo thì phải cầm lấy nó và khóa cửa bếp lại. Dùng xong, rửa sạch rồi mới được mở khóa cho người khác vào\u0026rdquo;.\nTrong Java, cơ chế khóa đó chính là từ khóa synchronized.\nKhi một phương thức hoặc một khối lệnh được đánh dấu là synchronized, nó đảm bảo rằng tại một thời điểm, chỉ có duy nhất một luồng được phép thực thi nó trên cùng một đối tượng. Các luồng khác muốn vào phải xếp hàng chờ đến lượt.\nVí dụ: Quản lý số lượng món ăn đã hoàn thành.\nJava\nclass CounterMonAn { private int soMonDaHoanThanh = 0; // Chỉ một người được vào đây cập nhật số lượng tại một thời điểm public synchronized void hoanThanhThemMon() { int hienTai = soMonDaHoanThanh; System.out.println(Thread.currentThread().getName() + \u0026#34; thấy có \u0026#34; + hienTai + \u0026#34; món đã xong, chuẩn bị thêm 1.\u0026#34;); soMonDaHoanThanh = hienTai + 1; System.out.println(\u0026#34;=\u0026gt; Tổng cộng đã xong: \u0026#34; + soMonDaHoanThanh + \u0026#34; món.\u0026#34;); } public int getSoMonDaHoanThanh() { return soMonDaHoanThanh; } } public class Main { public static void main(String[] args) throws InterruptedException { CounterMonAn counter = new CounterMonAn(); Runnable task = () -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) { counter.hoanThanhThemMon(); } }; Thread dauBepA = new Thread(task, \u0026#34;Đầu bếp A\u0026#34;); Thread dauBepB = new Thread(task, \u0026#34;Đầu bếp B\u0026#34;); dauBepA.start(); dauBepB.start(); // Chờ cả 2 đầu bếp làm xong việc dauBepA.join(); dauBepB.join(); System.out.println(\u0026#34;Cuối ngày, tổng số món đã hoàn thành là: \u0026#34; + counter.getSoMonDaHoanThanh()); // Kết quả sẽ luôn là 200 } } Nếu bạn bỏ từ khóa synchronized đi, kết quả cuối cùng có thể sẽ không phải là 200, vì hai luồng sẽ \u0026ldquo;giẫm chân\u0026rdquo; lên nhau khi cập nhật biến soMonDaHoanThanh.\nKết Luận Vậy là bạn đã hiểu những ý tưởng cốt lõi của multithreading rồi đấy!\nMultithreading là cho phép chương trình làm nhiều việc cùng lúc, như có nhiều đầu bếp trong bếp.\nMột Thread giống như một đầu bếp.\nBạn có thể tạo Thread bằng cách extends Thread hoặc implements Runnable (khuyến khích dùng cách thứ hai).\nKhi nhiều thread dùng chung tài nguyên (cái chảo), hãy dùng synchronized để tránh tranh giành và gây ra lỗi. Hy vọng qua ví dụ về nhà bếp, bạn đã thấy multithreading không hề đáng sợ. Nó là một công cụ cực kỳ mạnh mẽ để làm cho ứng dụng của bạn chạy nhanh và hiệu quả hơn rất nhiều!\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/multithread/","section":"Bài viết","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Đa Luồng: Khi Máy Tính Của Bạn Mọc Thêm Tay","type":"posts"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/ipsum/","section":"Tags","summary":"","title":"Ipsum","type":"tags"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/lorem/","section":"Tags","summary":"","title":"Lorem","type":"tags"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"14 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/network/","section":"Tags","summary":"","title":"Network","type":"tags"},{"content":"Bạn đã bao giờ tự hỏi làm thế nào mà một email quan trọng, một bức ảnh kỷ niệm, hay một tập tin công việc lại có thể đi từ máy tính này sang máy tính khác qua mạng Internet rộng lớn mà không bị mất mát hay sai sót một mẩu dữ liệu nào không? \u0026ldquo;Phép màu\u0026rdquo; đằng sau sự toàn vẹn đó phần lớn đến từ một giao thức nền tảng có tên là TCP, hay Transmission Control Protocol (Giao thức Điều khiển Truyền vận).\nHãy tưởng tượng bạn đang gửi một bộ lắp ráp mô hình quý giá qua đường bưu điện. Bạn sẽ không chỉ đơn giản là ném các mảnh ghép vào một chiếc hộp và hy vọng người nhận có thể tự mình sắp xếp chúng. Thay vào đó, bạn sẽ cẩn thận đánh số thứ tự từng mảnh, kiểm tra kỹ lưGiao thức TCP (Transmission Control Protocol) là một trong những giao thức cốt lõi của bộ giao thức Internet (IP), đóng vai trò thiết yếu trong việc đảm bảo truyền dữ liệu một cách đáng tin cậy và có trật tự giữa các ứng dụng trên mạng. Hãy cùng tìm hiểu sâu hơn về cách thức hoạt động và tầm quan trọng của TCP.\nTCP-Transnmission Control Protocol # Giao thức TCP được sử dụng ở tầng vận chuyển (OSI) đảm bảo cho dữ liệu gởi đi được tin cậy và xác thực giữa các nút mạng. Giao thức TCP phân chia dữ liệu thành các gói tin gọi là datagram. TCP gắn thêm phần header vào datagram. Phần header được mô tả trong hình vẽ bên dưới.\nTrường Mô tả Source Port Cổng gửi dữ liệu (ứng dụng gửi). Destination Port Cổng nhận dữ liệu (ứng dụng đích). Sequence Number Số thứ tự của byte đầu tiên trong gói tin hiện tại. Acknowledgement Number Số xác nhận – thông báo đã nhận đến byte nào. Data Offset Độ dài phần header (đơn vị 32 bit). Reserved Dự trữ cho tương lai, luôn bằng 0. Flags Các cờ điều khiển (SYN, ACK, FIN, RST, PSH, URG\u0026hellip;). Window (Sliding Window) Kích thước cửa sổ – lượng dữ liệu có thể nhận tiếp. Checksum Kiểm tra lỗi của toàn bộ gói TCP. Urgent Pointer Chỉ vị trí dữ liệu khẩn cấp (nếu có). Options Tùy chọn mở rộng (ví dụ: MSS, Window Scale\u0026hellip;). Padding Đệm bit 0 để header là bội số của 32 bit. Data Dữ liệu thực tế được truyền. Cách Giao Thức TCP Hoạt Động # Tiếp Theo Chúng Ta Sẽ Nói Về Các Cơ Chế Trong TCP\nBắt Tay 3 Bước # Điểm đặc trưng nhất của TCP chính là cơ chế thiết lập kết nối đáng tin cậy thông qua quy trình \u0026ldquo;bắt tay ba bước\u0026rdquo; (Three-Way Handshake). Quá trình này đảm bảo rằng cả hai thiết bị (máy gửi và máy nhận) đều sẵn sàng và đồng bộ trước khi bất kỳ dữ liệu thực tế nào được trao đổi.\nHãy hình dung quy trình này như một cuộc gọi điện thoại:\nSYN (Synchronize): Máy gửi (Client) bắt đầu bằng cách gửi một gói tin đặc biệt gọi là SYN đến máy nhận (Server). Điều này giống như bạn nhấc máy và nói: \u0026ldquo;Alo, bạn có nghe rõ tôi không?\u0026rdquo;\nSYN-ACK (Synchronize-Acknowledge): Nếu máy nhận sẵn sàng, nó sẽ gửi lại một gói tin SYN-ACK. Điều này có nghĩa là: \u0026ldquo;Tôi nghe rõ! Bạn có nghe rõ tôi không?\u0026rdquo;\nACK (Acknowledge): Cuối cùng, máy gửi ban đầu sẽ gửi lại một gói tin ACK để xác nhận. Giống như bạn trả lời: \u0026ldquo;Tôi cũng nghe rõ! Chúng ta có thể bắt đầu nói chuyện.\u0026rdquo;\nSau khi ba bước này hoàn tất, một kết nối ổn định đã được thiết lập, và dữ liệu có thể bắt đầu được truyền đi.\nTruyền Dữ Liệu # Khi kết nối đã sẵn sàng, TCP không gửi toàn bộ dữ liệu (ví dụ: một file ảnh lớn) cùng một lúc. Thay vào đó, nó thực hiện một quy trình rất tỉ mỉ:\nChia nhỏ và Đánh số (Segmentation \u0026amp; Sequence Numbers) Hành động: TCP chia dữ liệu lớn của bạn thành các phần nhỏ hơn, dễ quản lý hơn gọi là phân đoạn (segments). Quan trọng nhất, mỗi phân đoạn này được gán một số thứ tự (sequence number) duy nhất.\nTương tự như: Bạn viết câu chuyện của mình ra 10 tấm bưu thiếp và cẩn thận đánh số \u0026ldquo;Trang 1/10\u0026rdquo;, \u0026ldquo;Trang 2/10\u0026rdquo;,\u0026hellip; ở góc mỗi tấm. Điều này đảm bảo người nhận có thể ghép chúng lại theo đúng thứ tự, ngay cả khi người đưa thư giao chúng một cách lộn xộn.\nGửi và Chờ Xác Nhận (Acknowledgement - ACK) Hành động: Máy gửi sẽ gửi đi một hoặc một vài phân đoạn dữ liệu. Sau khi máy nhận nhận được các phân đoạn này một cách nguyên vẹn, nó sẽ gửi lại một gói tin xác nhận gọi là ACK, báo rằng: \u0026ldquo;Tôi đã nhận được dữ liệu đến số thứ tự X rồi, hãy gửi phần tiếp theo đi!\u0026rdquo;\nTương tự như: Sau khi gửi đi tấm bưu thiếp \u0026ldquo;Trang 1\u0026rdquo;, bạn sẽ chờ bạn mình nhắn tin lại: \u0026ldquo;Đã nhận trang 1 nhé!\u0026rdquo;. Khi nhận được tin nhắn đó, bạn mới yên tâm gửi tiếp \u0026ldquo;Trang 2\u0026rdquo;.\nGửi lại Nếu Bị Thất Lạc (Retransmission) Hành động: Điều gì xảy ra nếu một phân đoạn bị mất trên đường truyền, hoặc gói tin ACK bị thất lạc? Máy gửi sẽ đặt một bộ đếm thời gian. Nếu hết thời gian mà không nhận được ACK cho một phân đoạn nào đó, nó sẽ mặc định rằng phân đoạn đó đã bị mất và tự động gửi lại chính xác phân đoạn đó.\nTương tự như: Bạn gửi đi \u0026ldquo;Trang 3\u0026rdquo; và chờ mãi không thấy bạn mình xác nhận. Bạn sẽ nghĩ rằng tấm bưu thiếp đó đã bị thất lạc và lấy một tấm khác, viết lại nội dung \u0026ldquo;Trang 3\u0026rdquo; rồi gửi lại để đảm bảo câu chuyện không bị thiếu.\nKiểm tra Lỗi (Checksum) Hành động: Mỗi phân đoạn TCP đều chứa một giá trị gọi là checksum. Đây là một con số được tính toán dựa trên nội dung của dữ liệu. Khi máy nhận nhận được phân đoạn, nó cũng tự tính toán checksum. Nếu con số này không khớp với checksum được gửi đến, máy nhận sẽ biết rằng dữ liệu đã bị lỗi trên đường truyền và sẽ hủy bỏ phân đoạn đó (và chờ máy gửi gửi lại).\nTương tự như: Bạn ghi số lượng từ trên mỗi tấm bưu thiếp. Người bạn của bạn khi nhận được sẽ đếm lại số từ. Nếu không khớp, họ biết rằng tấm bưu thiếp đã bị mờ hoặc rách và sẽ yêu cầu bạn gửi lại.\nKiểm Soát Luồng và Tránh Tắc Nghẽn # TCP rất \u0026ldquo;thông minh\u0026rdquo; trong việc quản lý tốc độ truyền dữ liệu.\nKiểm soát luồng (Flow Control): Máy nhận có thể thông báo cho máy gửi về khả năng tiếp nhận dữ liệu của mình (gọi là \u0026ldquo;cửa sổ nhận\u0026rdquo;). Nếu máy nhận đang bận xử lý, nó có thể yêu cầu máy gửi giảm tốc độ lại để tránh bị quá tải.\nKiểm soát tắc nghẽn (Congestion Control): TCP có thể phát hiện các dấu hiệu tắc nghẽn trên mạng (ví dụ: các gói tin bắt đầu bị mất). Khi phát hiện tắc nghẽn, nó sẽ chủ động giảm tốc độ gửi để làm giảm áp lực cho mạng, giúp duy trì sự ổn định cho tất cả mọi người.\nKhi Nào Chúng Ta Sử Dụng TCP? # Vì sự đáng tin cậy là ưu tiên hàng đầu, TCP là lựa chọn lý tưởng cho các ứng dụng mà ở đó mỗi bit dữ liệu đều quan trọng. Ví dụ:\nDuyệt web (HTTP/HTTPS): Để các trang web hiển thị chính xác.\nGửi/nhận Email (SMTP, POP3, IMAP): Để đảm bảo nội dung email không bị sai lệch.\nTruyền file (FTP): Để chắc chắn rằng tập tin được tải xuống hoặc tải lên một cách toàn vẹn.\nKết nối đầu cuối an toàn (SSH): Để mọi lệnh bạn gõ đều được thực thi đúng.\nKết Luận # TCP có thể không phải là giao thức nhanh nhất (vì các quy trình kiểm tra và xác nhận của nó), nhưng nó chắc chắn là một trong những giao thức đáng tin cậy nhất. Nó hoạt động như một người quản lý cần mẫn và cẩn thận ở hậu trường, đảm bảo rằng thế giới kỹ thuật số của chúng ta vận hành một cách trơn tru và chính xác. Lần tới khi bạn gửi một email hay tải một trang web, hãy nhớ đến quy trình \u0026ldquo;bắt tay\u0026rdquo; và kiểm tra tỉ mỉ mà TCP đang thực hiện để giúp bạn.\n","date":"14 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/tcp/","section":"Bài viết","summary":"TCP (Giao thức Điều khiển Truyền vận) là một giao thức Internet thiết yếu, đảm bảo dữ liệu được gửi đi một cách đáng tin cậy và đúng thứ tự bằng cách kiểm tra lỗi và tự động gửi lại các gói tin bị mất, nền tảng cho các dịch vụ quan trọng như duyệt web và email.","title":"TCP: Giao Thức Đáng Tin Cậy Của Internet","type":"posts"},{"content":" Giới Thiệu # UDP: Gã Giao Hàng Siêu Tốc Nhưng Dễ Mất Hàng\nChào bạn! Trong thế giới mạng máy tính, có hai \u0026ldquo;anh em\u0026rdquo; giao hàng nổi tiếng mà bạn sẽ nghe đi nghe lại: TCP và UDP. Nếu TCP là một nhân viên giao hàng cực kỳ cẩn thận, luôn gọi điện xác nhận trước khi đi, giao đúng thứ tự, và yêu cầu ký nhận\u0026hellip; thì UDP chính là gã giao hàng trái ngược hoàn toàn: phóng khoáng, siêu tốc, nhưng hơi đoảng. Hôm nay, chúng ta hãy tìm hiểu về gã giao hàng thú vị này nhé! TCP vs. UDP: Một Cuộc Điện Thoại vs. Gửi Bưu Thiếp Để hiểu UDP, cách tốt nhất là so sánh nó với người anh TCP. 📞 TCP (Transmission Control Protocol) giống như một cuộc điện thoại:\nBấm số (Bắt tay): Bạn phải nhấc máy, bấm số và chờ người kia trả lời \u0026ldquo;A lô?\u0026rdquo;. Phải có một kết nối được thiết lập rõ ràng. Trò chuyện (Truyền dữ liệu có thứ tự): Khi nói chuyện, các câu chữ của bạn đến tai người nghe theo đúng thứ tự bạn nói. Nếu người nghe không nghe rõ, họ sẽ hỏi lại: \u0026ldquo;Bạn nói lại được không?\u0026rdquo;. Chào tạm biệt (Đóng kết nối): Khi nói xong, cả hai cùng nói \u0026ldquo;Tạm biệt\u0026rdquo; rồi mới gác máy. =\u0026gt; Đặc điểm của TCP: Tin cậy, đảm bảo dữ liệu đến nơi, đúng thứ tự, nhưng hơi chậm vì có nhiều thủ tục. 📮 UDP (User Datagram Protocol) giống như gửi một tấm bưu thiếp:\nKhông cần gọi trước: Bạn chỉ cần viết địa chỉ người nhận lên bưu thiếp rồi thả vào hòm thư. Bạn không cần gọi điện hỏi \u0026ldquo;Ê, tôi sắp gửi bưu thiếp cho ông nhé?\u0026rdquo;. Đây được gọi là \u0026ldquo;không kết nối\u0026rdquo; (connectionless). Không đảm bảo: o\tBưu thiếp có thể bị thất lạc trên đường đi. o\tNếu bạn gửi 3 tấm bưu thiếp liên tiếp, chúng có thể đến nơi không theo thứ tự. Tấm thứ 3 có thể đến trước tấm thứ 1. o\tKhông ai gọi lại báo cho bạn là \u0026ldquo;Tôi nhận được bưu thiếp rồi nhé!\u0026rdquo;. Siêu nhẹ, siêu nhanh: Vì bỏ qua hết các thủ tục xác nhận rườm rà, việc gửi một tấm bưu thiếp cực kỳ nhanh và đơn giản. =\u0026gt; Đặc điểm của UDP: Siêu nhanh, gọn nhẹ, nhưng không đảm bảo dữ liệu sẽ đến, không đảm bảo đến đúng thứ tự. Khoan Đã\u0026hellip; Vậy Ai Lại Dùng Một Dịch Vụ \u0026ldquo;Không Đáng Tin Cậy\u0026rdquo;? Nghe thì có vẻ UDP rất tệ, nhưng nó lại là người hùng trong rất nhiều trường hợp mà tốc độ được ưu tiên hơn sự hoàn hảo. Hãy nghĩ xem, bạn có cần sự cẩn thận của một cuộc điện thoại trong các tình huống sau không? Xem Livestream, Gọi Video: o\tVấn đề: Khi bạn đang xem bóng đá trực tiếp, việc hình ảnh bị vỡ một vài khung hình (do mất gói tin UDP) trong một giây còn hơn là cả video bị đứng hình 2-3 giây để chờ tải lại gói tin bị mất đó (nếu dùng TCP). o\tGiải pháp UDP: Cứ liên tục gửi dữ liệu hình ảnh mới nhất. Mất một vài khung hình cũ cũng không sao, miễn là bạn đang xem được diễn biến hiện tại. Chơi Game Online: o\tVấn đề: Trong một game bắn súng, vị trí của đối thủ phải được cập nhật ngay lập tức. Dữ liệu về vị trí của họ 1 giây trước đã hoàn toàn vô dụng. o\tGiải pháp UDP: Gửi liên tục vị trí mới nhất của người chơi. Nếu một gói tin vị trí bị mất, không sao cả, vì gói tin ngay sau đó sẽ cập nhật vị trí mới hơn. Chậm trễ một chút thôi là bạn đã \u0026ldquo;lên bảng đếm số\u0026rdquo; rồi! Hệ thống phân giải tên miền (DNS): o\tVấn đề: Khi bạn gõ google.com vào trình duyệt, máy tính cần hỏi máy chủ DNS: \u0026ldquo;IP của https://www.google.com/url?sa=E\u0026source=gmail\u0026q=google.com là gì?\u0026rdquo;. Đây là một câu hỏi rất nhỏ. o\tGiải pháp UDP: Gửi đi một câu hỏi nhỏ và nhận về một câu trả lời nhỏ. Dùng UDP cực nhanh. Nếu lỡ gói tin bị mất, máy tính chỉ đơn giản là hỏi lại. Nhanh hơn nhiều so với việc thiết lập cả một kết nối TCP chỉ để hỏi một câu đơn giản. Nguyên tắc vàng: Nếu dữ liệu mới nhất luôn quan trọng hơn dữ liệu cũ, và việc mất mát một chút dữ liệu có thể chấp nhận được, hãy dùng UDP! Ví Dụ Code: Gửi và Nhận Tin Nhắn Bằng UDP Hãy xem cách \u0026ldquo;gửi bưu thiếp\u0026rdquo; trong Java hoạt động như thế nào. Chúng ta sẽ có một Server (người nhận thư) và một Client (người gửi thư).\nUDPServer.java (Người nhận thư) Java import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; public class UDPServer { public static void main(String[] args) throws Exception { // 1. Mở một \u0026#34;hòm thư\u0026#34; (socket) tại cổng 9876 DatagramSocket serverSocket = new DatagramSocket(9876); System.out.println(\u0026#34;Server đang chạy và chờ nhận bưu thiếp...\u0026#34;); while (true) { // 2. Chuẩn bị một chỗ trống để chứa bưu thiếp sắp tới byte[] receiveData = new byte[1024]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); // 3. Chờ và nhận bưu thiếp serverSocket.receive(receivePacket); // 4. Mở bưu thiếp ra xem String sentence = new String(receivePacket.getData()).trim(); System.out.println(\u0026#34;ĐÃ NHẬN: \u0026#34; + sentence); // (Tùy chọn) Gửi lại thư cảm ơn. Lấy địa chỉ từ chính bưu thiếp vừa nhận. InetAddress IPAddress = receivePacket.getAddress(); int port = receivePacket.getPort(); String capitalizedSentence = \u0026#34;Server da nhan duoc: \u0026#34; + sentence.toUpperCase(); byte[] sendData = capitalizedSentence.getBytes(); DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port); serverSocket.send(sendPacket); } } } UDPClient.java (Người gửi thư) Java import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; public class UDPClient { public static void main(String[] args) throws Exception { // 1. Lấy một cái bút và giấy để viết thư BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); // 2. Tạo một hòm thư của riêng mình để gửi và có thể nhận lại thư trả lời DatagramSocket clientSocket = new DatagramSocket(); // 3. Tìm địa chỉ của người nhận (ở đây là máy của mình - localhost) InetAddress IPAddress = InetAddress.getByName(\u0026#34;localhost\u0026#34;); System.out.print(\u0026#34;Nhập tin nhắn để gửi: \u0026#34;); String sentence = inFromUser.readLine(); byte[] sendData = sentence.getBytes(); // 4. Tạo một tấm bưu thiếp chứa: nội dung, độ dài, địa chỉ và cổng của người nhận DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876); // 5. Thả vào hòm thư và quên nó đi! clientSocket.send(sendPacket); System.out.println(\u0026#34;Đã gửi bưu thiếp!\u0026#34;); // (Tùy chọn) Chờ nhận thư cảm ơn byte[] receiveData = new byte[1024]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); clientSocket.receive(receivePacket); String modifiedSentence = new String(receivePacket.getData()).trim(); System.out.println(\u0026#34;THƯ TRẢ LỜI TỪ SERVER: \u0026#34; + modifiedSentence); // 6. Đóng hòm thư clientSocket.close(); } } Kết Luận UDP không phải là phiên bản \u0026ldquo;lỗi\u0026rdquo; của TCP. Nó là một công cụ chuyên dụng, được thiết kế cho những công việc mà tốc độ là tất cả. Giống như trong cuộc sống, đôi khi bạn cần một cuộc gọi điện thoại nghiêm túc (TCP), nhưng cũng có lúc, một tấm bưu thiếp nhanh gọn (UDP) lại là lựa chọn hoàn hảo. Hy vọng qua ví dụ này, bạn đã không còn thấy UDP xa lạ nữa!\n","date":"14 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/udp/","section":"Bài viết","summary":"UDP","title":"UDP: Gã Giao Hàng Siêu Tốc Nhưng Dễ Mất Hàng","type":"posts"},{"content":" Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\nNunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/javascriptbasic/","section":"Bài viết","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote","type":"posts"},{"content":" Tieu de 11 # Socket 11\nNunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/socket/","section":"Bài viết","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote","type":"posts"},{"content":" Giới Thiệu Bản Thân # Xin chào, tôi là Phan Đình Tuấn. Tôi là một nhà phát triển phần mềm với niềm đam mê kiến tạo nên những giải pháp công nghệ vững chắc và ý nghĩa. Với tôi, mỗi dòng code không chỉ là logic, mà còn là một bước trên hành trình không ngừng học hỏi và chinh phục những thách thức kỹ thuật phức tạp.\nNiềm đam mê của tôi với công nghệ bắt đầu từ sự tò mò về cách các chương trình máy tính hoạt động. Sự tò mò ấy đã dẫn lối tôi đến với thế giới lập trình, và tôi quyết định theo đuổi nó một cách nghiêm túc. Tôi đã tự mình khám phá và xây dựng nền tảng vững chắc với các công nghệ mới.\nKể từ đó, tôi luôn nỗ lực để nâng cao kiến thức học thuật, đồng thời áp dụng chúng vào các dự án cá nhân, đặc biệt trong lĩnh vực lập trình phần mềm, nhằm mở rộng hiểu biết, mài giũa kỹ năng và khám phá sâu hơn giới hạn của bản thân.\nTrong công việc, tôi luôn nỗ lực hết mình và tin rằng chất lượng sản phẩm là thước đo giá trị chính xác nhất. Tôi muốn khẳng định bản thân qua hiệu quả của giải pháp mình tạo ra hơn là lời nói. Tôi yêu thích việc phân tích vấn đề một cách có hệ thống và luôn có trách nhiệm tìm ra hướng đi tối ưu nhất để giải quyết các bài toán kỹ thuật.\nDù phần lớn thời gian gắn bó với máy tính và những dòng code, tôi vẫn trân trọng những khoảng thời gian riêng để đọc các bài viết chuyên sâu về công nghệ hoặc nghe một bản nhạc yêu thích. Sở thích của tôi là sưu tầm những giải pháp kỹ thuật hay, những kiến trúc hệ thống độc đáo, chúng không chỉ phản ánh tư duy của tôi mà còn là nguồn động lực để tôi tiến về phía trước.\nHiện tại, tôi đang tìm kiếm một môi trường năng động, chuyên nghiệp, nơi cho phép tôi được học hỏi và phát triển. Vui lòng dành chút thời gian để xem qua hồ sơ năng lực của tôi, và đừng ngần ngại liên hệ với tôi nhé.\n","externalUrl":null,"permalink":"/phandinhtuan.dev/aboutme/","section":"","summary":"","title":"","type":"page"},{"content":" Học Vấn # Kỹ Sư Công Nghệ Phần Mềm # Đại Học Công Nghệ Tp Hồ Chí Minh(HUTECH) - Thủ Đức Campus | Tháng 8 Năm 2025 - Hiện tại # HUTECH là trường đại học tư thục đào tạo đa ngành tại Việt Nam. Năm 2024, HUTECH đạt chuẩn đánh giá quốc tế QS Stars 4 Sao chu kỳ 2 theo Bộ chuẩn mới QS Stars phiên bản 6.0 ban hành vào tháng 02/2024.\nXuyên suốt quá trình học tập tại giảng đường, tôi đã xây dựng được một nền tảng kiến thức tốt về các nguyên lý kỹ thuật phần mềm, được thể hiện qua kết quả học tập tốt ở các môn học chuyên ngành. Tôi không chỉ tập trung vào việc nắm vững lý thuyết ở trường, mà còn chủ động tìm cách áp dụng những kiến thức này vào các đồ án thực tế, coi đó là cầu nối quan trọng nhất để chuẩn bị cho các dự án trong môi trường làm việc chuyên nghiệp. Các Dự Án Đã Tham Gia # Quản Lý Rạp Chiếu Phim # Học Phần Lập Trình Trên Môi Trường Window - Tháng 12 Năm 2025 - Tháng 1 Năm 2026 # Github Dự Án \u0026ldquo;Ứng dụng Quản lý Rạp Chiếu Phim\u0026rdquo; là một giải pháp phần mềm desktop được thiết kế để tối ưu hóa và đơn giản hóa quy trình vận hành tại các rạp chiếu phim. Với giao diện trực quan và các chức năng quản lý , ứng dụng giúp nhân viên dễ dàng thực hiện các nghiệp vụ hàng ngày, từ bán vé đến báo cáo doanh thu, góp phần nâng cao hiệu quả kinh doanh và trải nghiệm của khách hàng.\nTrong vai trò là thành viên nhóm phát triển, tôi đã trực tiếp tham gia vào việc xây dựng các module chức năng của ứng dụng. Cụ thể, tôi chịu trách nhiệm thiết kế và lập trình giao diện người dùng cho các form quản lý lịch chiếu và bán vé, đồng thời xây dựng các logic xử lý nghiệp vụ liên quan. Ngoài ra, tôi cũng tham gia vào việc kết nối ứng dụng với cơ sở dữ liệu, đảm bảo dữ liệu được lưu trữ và truy xuất một cách chính xác và hiệu quả. Thông qua dự án này, tôi đã củng cố vững chắc kỹ năng lập trình C# trên nền tảng .NET WinForms, rèn luyện khả năng làm việc nhóm và hiểu sâu hơn về quy trình phát triển một ứng dụng desktop hoàn chỉnh.\nĐiểm học phần 4.0/4.0\nHỗ Trợ Luyện Thi Bằng Lái Xe # Học Phần Công Nghệ Phần Mềm - Tháng 5 Năm 2025 - Tháng 6 Năm 2025 # Github Dự Án \u0026ldquo;Ứng dụng Hỗ Trợ Luyện Thi Bằng Lái Xe\u0026rdquo; là một nền tảng học tập trực tuyến nhằm hỗ trợ học viên ôn luyện và chuẩn bị tốt nhất cho kỳ thi lý thuyết lái xe. Với giao diện thân thiện và tính năng đa dạng, ứng dụng giúp người học nắm vững kiến thức giao thông, làm quen với các câu hỏi thi thật và tự tin vượt qua kỳ thi ngay từ lần đầu tiên.\nTrong vai trò là thành viên nhóm phát triển, tôi đã đóng góp vào dự án thông qua việc xây dựng và triển khai một số API phục vụ cho các chức năng chính của ứng dụng. Cụ thể, tôi đã phát triển các endpoint để xử lý dữ liệu ,tích hợp các tính năng backend cần thiết, kết nối với hệ thống cơ sơ dữ liệu. Ngoài ra, tôi cũng tham gia phát triển một số chức năng giao diện người dùng, đảm bảo sự tương tác mượt mà giữa front-end và back-end. Thông qua công việc này, tôi đã nâng cao kỹ năng lập trình, làm việc nhóm và hiểu rõ hơn về quy trình phát triển phần mềm thực tế.\nĐiểm học phần 4.0/4.0\nKỹ Năng # - Tự học ★★★★★ # - Sáng tạo ★★★☆☆ # - Quản lý thời gian ★★★★☆ # - Giải quyết vấn đề ★★★★☆ # - Làm Việc Nhóm ★★★★☆ # - Kỹ Năng Giao Tiếp ★★★☆☆ # Bằng Cấp Và Chứng Chỉ # ","externalUrl":null,"permalink":"/phandinhtuan.dev/resume/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/phandinhtuan.dev/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/phandinhtuan.dev/series/","section":"Series","summary":"","title":"Series","type":"series"}]