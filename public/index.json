
[{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/","section":"Bài viết","summary":"","title":"Bài viết","type":"posts"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"Chào bạn! Chúng ta đã biết cách gửi \u0026ldquo;bưu thiếp\u0026rdquo; (UDP) và thực hiện \u0026ldquo;cuộc gọi\u0026rdquo; (TCP) giữa các máy tính. Nhưng những cách đó giống như bạn phải tự mình viết thư tay và bỏ vào hòm thư.\nGiờ hãy tưởng tượng một thế giới \u0026ldquo;vi diệu\u0026rdquo; hơn: bạn ngồi ở Sài Gòn, nhưng có thể cầm cái điều khiển từ xa và bấm nút \u0026ldquo;pha cà phê\u0026rdquo; trên một máy pha cà phê đặt ở Hà Nội, và nó thực sự hoạt động.\nĐó chính xác là những gì Java RMI (Remote Method Invocation) cho phép bạn làm!\nRMI Là Gì? Một Cái \u0026ldquo;Điều Khiển Từ Xa\u0026rdquo; Cho Đối Tượng #\rRMI là một cơ chế của Java cho phép một đối tượng trên một máy tính (Client) có thể gọi các phương thức (method) của một đối tượng đang chạy trên một máy tính khác (Server) một cách trong suốt, cứ như thể hai đối tượng đó đang ở chung một máy.\nĐể dễ hình dung, hãy so sánh:\nLập trình thông thường: Bạn có một đối tượng mayPhaCaPhe và bạn gọi mayPhaCaPhe.phaEspresso(). Mọi thứ đều diễn ra trong cùng một chương trình.\nVới RMI: Bạn ở máy A, có một cái \u0026ldquo;điều khiển từ xa\u0026rdquo; trỏ tới đối tượng mayPhaPhe thật đang chạy ở máy B. Bạn chỉ cần gọi dieuKhien.phaEspresso() trên máy A, và RMI sẽ lo hết phần việc \u0026ldquo;gửi tín hiệu\u0026rdquo; qua mạng để máy B thực hiện lệnh và trả kết quả về cho bạn.\nBạn, với tư cách là lập trình viên, không cần phải quan tâm đến việc mở socket, gửi byte hay đóng kết nối. Bạn chỉ cần \u0026ldquo;bấm nút\u0026rdquo; thôi!\nCác Nhân Vật Chính Trong Vở Kịch RMI Một hệ thống RMI đơn giản có 4 thành phần chính:\nRemote Interface (Bảng điều khiển): #\rĐây là một file interface trong Java, định nghĩa các \u0026ldquo;nút bấm\u0026rdquo; nào sẽ có trên điều khiển từ xa. Ví dụ: phaEspresso(), kiemTraLuongNuoc().\nNó là bản hợp đồng giữa Client và Server, quy định những gì Client có thể yêu cầu Server làm.\nRemote Object (Đối tượng thực thi ở Server): #\rĐây là một lớp (class) ở phía Server, implements cái Remote Interface ở trên.\nLớp này chứa đoạn code thực sự để \u0026ldquo;pha cà phê\u0026rdquo; hay \u0026ldquo;kiểm tra nước\u0026rdquo;. Nó là cái máy pha cà phê thật sự.\nRMI Server (Người quản lý máy móc): #\rĐây là chương trình chính ở phía Server. Nhiệm vụ của nó là khởi tạo \u0026ldquo;máy pha cà phê\u0026rdquo; (Remote Object) và đăng ký nó với một dịch vụ đặc biệt.\nNó nói với dịch vụ rằng: \u0026ldquo;Này, tôi có một cái máy pha cà phê sẵn sàng phục vụ ở địa chỉ là /mayphaphe nhé!\u0026rdquo;.\nRMI Registry (Tổng đài/Danh bạ): #\rĐây là một chương trình đặc biệt của Java, hoạt động như một cuốn danh bạ. Nó lắng nghe các yêu cầu đăng ký từ Server.\nKhi Client muốn tìm máy pha cà phê, nó sẽ hỏi \u0026ldquo;Tổng đài\u0026rdquo; này: \u0026ldquo;Cho tôi xin cái điều khiển của /mayphaphe với\u0026rdquo;.\nRMI Client (Người dùng): #\rĐây là chương trình ở máy Client. Nó sẽ kết nối tới \u0026ldquo;Tổng đài\u0026rdquo; (RMI Registry), hỏi xin \u0026ldquo;cái điều khiển\u0026rdquo; (một đối tượng proxy đặc biệt gọi là Stub).\nSau khi có được cái điều khiển này, nó có thể bắt đầu bấm nút (gọi phương thức) như bình thường.\nVí Dụ Code: Máy Tính Từ Xa #\rHãy tạo một chương trình RMI đơn giản cho phép Client gửi 2 số lên Server và nhận lại kết quả phép cộng.\n1. Calculator.java (Remote Interface - Bảng điều khiển) #\rJava\nimport java.rmi.Remote;\rimport java.rmi.RemoteException;\r// Phải kế thừa từ Remote để đánh dấu đây là một interface cho RMI\rpublic interface Calculator extends Remote {\r// Mọi phương thức trong này đều phải ném ra RemoteException\r// để xử lý các lỗi liên quan đến mạng\rint add(int a, int b) throws RemoteException;\r} 2. CalculatorImpl.java (Remote Object - Máy tính thật ở Server) #\rJava\nimport java.rmi.server.UnicastRemoteObject;\rimport java.rmi.RemoteException;\r// Kế thừa từ UnicastRemoteObject để biến nó thành một đối tượng có thể truy cập từ xa\rpublic class CalculatorImpl extends UnicastRemoteObject implements Calculator {\r// Constructor bắt buộc phải ném ra RemoteException\rprotected CalculatorImpl() throws RemoteException {\rsuper();\r}\r@Override\rpublic int add(int a, int b) throws RemoteException {\rSystem.out.println(\u0026#34;Server nhận được yêu cầu tính tổng: \u0026#34; + a + \u0026#34; + \u0026#34; + b);\rreturn a + b;\r}\r} 3. Server.java (Người quản lý) #\rJava\nimport java.rmi.registry.LocateRegistry;\rimport java.rmi.registry.Registry;\rpublic class Server {\rpublic static void main(String[] args) {\rtry {\r// 1. Tạo đối tượng thực thi\rCalculatorImpl calculator = new CalculatorImpl();\r// 2. Khởi động RMI Registry tại cổng 1099\rRegistry registry = LocateRegistry.createRegistry(1099);\r// 3. Đăng ký đối tượng với một cái tên duy nhất\rregistry.bind(\u0026#34;CalculatorService\u0026#34;, calculator);\rSystem.out.println(\u0026#34;Server đã sẵn sàng!\u0026#34;);\r} catch (Exception e) {\rSystem.err.println(\u0026#34;Server exception: \u0026#34; + e.toString());\re.printStackTrace();\r}\r}\r} 4. Client.java (Người dùng) #\rJava\nimport java.rmi.registry.LocateRegistry;\rimport java.rmi.registry.Registry;\rpublic class Client {\rpublic static void main(String[] args) {\rtry {\r// 1. Tìm đến RMI Registry đang chạy trên máy chủ (localhost) ở cổng 1099\rRegistry registry = LocateRegistry.getRegistry(\u0026#34;localhost\u0026#34;, 1099);\r// 2. Hỏi xin \u0026#34;cái điều khiển\u0026#34; có tên là \u0026#34;CalculatorService\u0026#34;\r// Lưu ý: Phải ép kiểu về đúng loại Interface\rCalculator calculator = (Calculator) registry.lookup(\u0026#34;CalculatorService\u0026#34;);\r// 3. Bấm nút! Gọi phương thức từ xa như bình thường\rint result = calculator.add(5, 3);\rSystem.out.println(\u0026#34;Kết quả từ Server: \u0026#34; + result);\r} catch (Exception e) {\rSystem.err.println(\u0026#34;Client exception: \u0026#34; + e.toString());\re.printStackTrace();\r}\r}\r} Bạn sẽ thấy Server in ra thông báo nó nhận được yêu cầu, và Client in ra kết quả \u0026ldquo;8\u0026rdquo;.\nKết Luận #\rRMI là một công nghệ mạnh mẽ thuộc họ RPC (Remote Procedure Call), giúp đơn giản hóa việc lập trình mạng phân tán trong Java. Thay vì phải làm việc với các chi tiết phức tạp của socket, bạn có thể tập trung vào logic nghiệp vụ, gọi các đối tượng từ xa một cách tự nhiên và thanh lịch. Nó là nền tảng cho nhiều công nghệ Java phức tạp hơn như EJB (Enterprise JavaBeans).\n","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/rmi/","section":"Bài viết","summary":"Giới thiệu Java RMI như điều khiển từ xa để gọi phương thức của đối tượng trên máy tính khác. Giải thích 4 thành phần chính (Interface, Object, Server, Registry) và ví dụ code minh họa việc gọi hàm từ xa.","title":"Java RMI: Gọi Phương Thức Từ Xa Dễ Dàng","type":"posts"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":"","date":"18 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Chào bạn! Hôm nay chúng ta sẽ khám phá một khái niệm nghe có vẻ phức tạp trong Java: Multithreading (lập trình đa luồng). Nhưng đừng lo, tôi sẽ giải thích nó theo cách đơn giản nhất, như thể bạn đang xem một bộ phim hoạt hình vậy.\nĐơn Luồng | Bạn Là Một Đầu Bếp Đơn Độc #\rHãy hình dung bạn là một đầu bếp trong một nhà hàng nhỏ, và bạn phải làm tất cả mọi việc.\nKhi có khách gọi món, quy trình của bạn là:\n- Nhận đơn hàng.\n- Đi vào bếp, chuẩn bị và nấu món ăn.\n- Mang món ăn ra cho khách.\n- Quay lại bếp dọn dẹp.\nMọi thứ diễn ra tuần tự. Nếu có 3 bàn khách cùng gọi món, bạn phải làm xong cho bàn thứ nhất rồi mới đến bàn thứ hai, rồi mới đến bàn thứ ba. Các vị khách đến sau sẽ phải chờ dài cổ. Đây chính là cách một chương trình đơn luồng (single-thread) hoạt động. Nó chỉ làm được một việc tại một thời điểm.\nĐa Luồng | Bạn Tuyển Thêm Nhân Viên #\rGiờ thì nhà hàng của bạn phát đạt hơn. Bạn quyết định thuê thêm 2 phụ bếp nữa. Mọi chuyện bây giờ hoàn toàn khác:\nBạn (Đầu bếp chính): Chuyên nhận đơn hàng và giám sát.\nPhụ bếp A: Chuyên sơ chế nguyên liệu.\nPhụ bếp B: Chuyên nấu nướng và trình bày.\nKhi 3 bàn khách cùng gọi món, bạn có thể nhận cả 3 đơn gần như cùng lúc, phụ bếp A bắt đầu sơ chế ngay lập tức, và phụ bếp B thì nấu ngay khi có nguyên liệu. Mọi thứ diễn ra song song. Nhà hàng của bạn phục vụ nhanh hơn gấp nhiều lần.\nĐó chính là Multithreading!\nTóm lại: Một chương trình đa luồng giống như một nhà bếp có nhiều đầu bếp. Mỗi \u0026ldquo;đầu bếp\u0026rdquo; được gọi là một Thread (luồng). Toàn bộ chương trình (nhà hàng) có thể xử lý nhiều công việc (nấu nhiều món) cùng một lúc, giúp tăng hiệu suất và tốc độ đáng kể.\nLàm Sao Để \u0026ldquo;Thuê Phụ Bếp\u0026rdquo; (Tạo Thread) Trong Java? #\rTrong Java, bạn có thể \u0026ldquo;thuê phụ bếp\u0026rdquo; (tạo một thread) theo hai cách phổ biến.\nCách 1: \u0026ldquo;Truyền nhân\u0026rdquo; - Kế thừa từ lớp Thread #\rCách này giống như bạn dạy nghề cho con trai mình. Bạn tạo một lớp mới và cho nó \u0026ldquo;kế thừa\u0026rdquo; mọi kỹ năng của một Thread cha.\nCách làm:\nTạo một class mới kế thừa từ java.lang.Thread.\nGhi đè (override) phương thức run(). Đây là nơi bạn định nghĩa những việc mà \u0026ldquo;phụ bếp\u0026rdquo; này sẽ làm.\nĐể bắt đầu, bạn gọi phương thức start().\nVí dụ: Hãy tạo một \u0026ldquo;phụ bếp\u0026rdquo; có nhiệm vụ thái 5 củ cà rốt.\nJava\n// Phụ bếp này tên là KitchenHelper, được đào tạo từ lớp Thread cha\rclass KitchenHelper extends Thread {\rprivate String name;\rpublic KitchenHelper(String name) {\rthis.name = name;\r}\r// Đây là công việc của phụ bếp: thái cà rốt\r@Override\rpublic void run() {\rfor (int i = 1; i \u0026lt;= 5; i++) {\rSystem.out.println(this.name + \u0026#34; đã thái xong củ cà rốt thứ: \u0026#34; + i);\rtry {\r// Giả vờ nghỉ 1 giây để thái củ tiếp theo\rThread.sleep(1000);\r} catch (InterruptedException e) {\r// Xử lý nếu có lỗi\r}\r}\r}\r}\rpublic class Restaurant {\rpublic static void main(String[] args) {\r// Thuê 2 phụ bếp\rKitchenHelper helper1 = new KitchenHelper(\u0026#34;Tuấn\u0026#34;);\rKitchenHelper helper2 = new KitchenHelper(\u0026#34;Đình\u0026#34;);\r// Yêu cầu họ bắt đầu làm việc!\rhelper1.start();\rhelper2.start();\r}\r} Nếu bạn chạy đoạn code trên, bạn sẽ thấy Tuấn và Đình thái cà rốt xen kẽ nhau. Họ đang làm việc song song!\nCách 2: \u0026ldquo;Người làm thuê\u0026rdquo; - Implement interface Runnable** #\rCách này linh hoạt hơn. Thay vì tạo ra một \u0026ldquo;phụ bếp\u0026rdquo; chính hiệu, bạn chỉ cần viết ra một \u0026ldquo;bản mô tả công việc\u0026rdquo; (gọi là Runnable), rồi đưa bản mô tả này cho một Thread bất kỳ để họ thực hiện.\nĐây là cách được khuyến khích sử dụng nhiều hơn vì Java không cho kế thừa từ nhiều lớp, nên việc \u0026ldquo;implement\u0026rdquo; sẽ giúp code của bạn linh hoạt hơn.\nVí dụ: Cùng công việc thái 5 củ cà rốt.\nJava\n// Đây là \u0026#34;bản mô tả công việc\u0026#34;\rclass TaskThaiCarrot implements Runnable {\rprivate String tenNguoiLam;\rpublic TaskThaiCarrot(String tenNguoiLam) {\rthis.tenNguoiLam = tenNguoiLam;\r}\r// Công việc cần làm được viết ở đây\r@Override\rpublic void run() {\rfor (int i = 1; i \u0026lt;= 5; i++) {\rSystem.out.println(this.tenNguoiLam + \u0026#34; đang thực hiện công việc, củ thứ: \u0026#34; + i);\rtry {\rThread.sleep(1000);\r} catch (InterruptedException e) {\r// Xử lý lỗi\r}\r}\r}\r}\rpublic class Restaurant {\rpublic static void main(String[] args) {\r// Tạo ra 2 bản mô tả công việc\rTaskThaiCarrot task1 = new TaskThaiCarrot(\u0026#34;Nhiệm vụ của Tuấn\u0026#34;);\rTaskThaiCarrot task2 = new TaskThaiCarrot(\u0026#34;Nhiệm vụ của Đình\u0026#34;);\r// Thuê 2 \u0026#34;Thread\u0026#34; và giao việc cho họ\rThread worker1 = new Thread(task1);\rThread worker2 = new Thread(task2);\r// Bắt đầu làm việc\rworker1.start();\rworker2.start();\r}\r} Kết quả cũng tương tự, nhưng cách tổ chức code này gọn gàng và dễ mở rộng hơn.\nSynchronized: Khi Các Phụ Bếp Tranh Giành Một Cái Chảo #\rQuay lại căn bếp. Giả sử bạn chỉ có một cái chảo chống dính duy nhất. Cả Tuấn và Đình đều cần nó để chiên trứng.\nTình huống xấu:\nTuấn kiểm tra, thấy cái chảo đang rảnh.\nNgay lúc đó, Đình cũng kiểm tra, cũng thấy cái chảo rảnh.\nTuấn đặt chảo lên bếp và đập trứng vào.\nĐình không biết Tuấn vừa lấy, cũng chạy tới và đập trứng của mình vào cùng cái chảo đó.\nKết quả: Món trứng chiên hỗn loạn, không ra hình thù gì!\nVấn đề này trong lập trình gọi là Race Condition (Tranh chấp tài nguyên). Nó xảy ra khi nhiều luồng cùng truy cập và thay đổi một tài nguyên dùng chung (biến, đối tượng, file\u0026hellip;).\nGiải Pháp: \u0026ldquo;Ai Dùng Thì Khóa Lại\u0026rdquo; (Synchronized) #\rĐể giải quyết, bạn ra quy định: \u0026ldquo;Ai muốn dùng cái chảo thì phải cầm lấy nó và khóa cửa bếp lại. Dùng xong, rửa sạch rồi mới được mở khóa cho người khác vào\u0026rdquo;.\nTrong Java, cơ chế khóa đó chính là từ khóa synchronized.\nKhi một phương thức hoặc một khối lệnh được đánh dấu là synchronized, nó đảm bảo rằng tại một thời điểm, chỉ có duy nhất một luồng được phép thực thi nó trên cùng một đối tượng. Các luồng khác muốn vào phải xếp hàng chờ đến lượt.\nVí dụ: Quản lý số lượng món ăn đã hoàn thành.\nJava\nclass CounterMonAn {\rprivate int soMonDaHoanThanh = 0;\r// Chỉ một người được vào đây cập nhật số lượng tại một thời điểm\rpublic synchronized void hoanThanhThemMon() {\rint hienTai = soMonDaHoanThanh;\rSystem.out.println(Thread.currentThread().getName() + \u0026#34; thấy có \u0026#34; + hienTai + \u0026#34; món đã xong, chuẩn bị thêm 1.\u0026#34;);\rsoMonDaHoanThanh = hienTai + 1;\rSystem.out.println(\u0026#34;=\u0026gt; Tổng cộng đã xong: \u0026#34; + soMonDaHoanThanh + \u0026#34; món.\u0026#34;);\r}\rpublic int getSoMonDaHoanThanh() {\rreturn soMonDaHoanThanh;\r}\r}\rpublic class Main {\rpublic static void main(String[] args) throws InterruptedException {\rCounterMonAn counter = new CounterMonAn();\rRunnable task = () -\u0026gt; {\rfor (int i = 0; i \u0026lt; 100; i++) {\rcounter.hoanThanhThemMon();\r}\r};\rThread dauBepA = new Thread(task, \u0026#34;Đầu bếp A\u0026#34;);\rThread dauBepB = new Thread(task, \u0026#34;Đầu bếp B\u0026#34;);\rdauBepA.start();\rdauBepB.start();\r// Chờ cả 2 đầu bếp làm xong việc\rdauBepA.join();\rdauBepB.join();\rSystem.out.println(\u0026#34;Cuối ngày, tổng số món đã hoàn thành là: \u0026#34; + counter.getSoMonDaHoanThanh()); // Kết quả sẽ luôn là 200\r}\r} Nếu bạn bỏ từ khóa synchronized đi, kết quả cuối cùng có thể sẽ không phải là 200, vì hai luồng sẽ \u0026ldquo;giẫm chân\u0026rdquo; lên nhau khi cập nhật biến soMonDaHoanThanh.\nKết Luận #\rVậy là bạn đã hiểu những ý tưởng cốt lõi của multithreading rồi đấy!\nMultithreading là cho phép chương trình làm nhiều việc cùng lúc, như có nhiều đầu bếp trong bếp.\nMột Thread giống như một đầu bếp.\nBạn có thể tạo Thread bằng cách extends Thread hoặc implements Runnable (khuyến khích dùng cách thứ hai).\nKhi nhiều thread dùng chung tài nguyên (cái chảo), hãy dùng synchronized để tránh tranh giành và gây ra lỗi. Hy vọng qua ví dụ về nhà bếp, bạn đã thấy multithreading không hề đáng sợ. Nó là một công cụ cực kỳ mạnh mẽ để làm cho ứng dụng của bạn chạy nhanh và hiệu quả hơn rất nhiều!\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/multithread/","section":"Bài viết","summary":"Giải thích Java Multithreading bằng ẩn dụ nhà bếp với đầu bếp (luồng) làm việc song song. Hướng dẫn tạo luồng (Thread/Runnable) và dùng synchronized để tránh tranh giành tài nguyên (dữ liệu chung).","title":"Đa Luồng: Khi Máy Tính Của Bạn Mọc Thêm Tay","type":"posts"},{"content":"Chào bạn! Trong thế giới thực, để liên lạc với ai đó, bạn có nhiều cấp độ thông tin khác nhau. Bạn có thể chỉ biết tọa độ GPS của nhà họ, hoặc bạn có một địa chỉ đầy đủ trên bì thư, hoặc bạn thực sự bắt đầu một cuộc trò chuyện với họ.\nTrong Java, việc kết nối mạng cũng diễn ra theo các cấp độ tương tự. Hãy cùng khám phá ba công cụ chính: InetAddress, URL, và URLConnection.\n1. InetAddress: Tọa Độ GPS Của Máy Chủ #\rHãy bắt đầu ở mức cơ bản nhất. InetAddress giống như tọa độ GPS của một máy chủ trên Internet.\nNó là gì? Nó đại diện cho một địa chỉ IP (ví dụ: 142.250.204.78). Đây là thông tin cốt lõi nhất để xác định vị trí của một máy tính trên mạng.\nCông dụng: Nhiệm vụ chính của nó là \u0026ldquo;tra bản đồ\u0026rdquo;, tức là chuyển đổi một tên miền (google.com) thành tọa độ GPS của nó (địa chỉ IP).\nHạn chế: Giống như tọa độ GPS, nó chỉ cho bạn biết vị trí của tòa nhà, chứ không cho bạn biết phải vào cửa nào, hay bạn muốn lấy thứ gì từ bên trong.\nNó là nền tảng, là thông tin vị trí thô.\nJava\nimport java.net.InetAddress;\rimport java.net.UnknownHostException;\rpublic class AddressFinder {\rpublic static void main(String[] args) {\rtry {\r// Dùng InetAddress để tìm \u0026#34;tọa độ\u0026#34; của Google\rInetAddress googleAddress = InetAddress.getByName(\u0026#34;google.com\u0026#34;);\rSystem.out.println(\u0026#34;Tọa độ GPS (IP) của Google: \u0026#34; + googleAddress.getHostAddress());\r} catch (UnknownHostException e) {\rSystem.err.println(\u0026#34;Không tìm thấy địa chỉ này trên bản đồ!\u0026#34;);\r}\r}\r} 2. URL: Bì Thư Với Địa Chỉ Đầy Đủ #\rBiết tọa độ là tốt, nhưng để gửi thư, bạn cần nhiều hơn thế. Bạn cần một URL, thứ giống như một bì thư được ghi địa chỉ đầy đủ và chi tiết.\nNó là gì? URL (Uniform Resource Locator) là một chuỗi địa chỉ hoàn chỉnh, ví dụ: https://www.google.com/search?q=java.\nCông dụng: Nó chứa tất cả thông tin cần thiết để xác định một tài nguyên cụ thể trên mạng:\nGiao thức (https://): Dùng dịch vụ bưu chính nào? (Chuyển phát nhanh bảo mật).\nTên miền (www.google.com): Tòa nhà nào?\nĐường dẫn (/search): Đến phòng ban nào trong tòa nhà?\nTham số (?q=java): Yêu cầu cụ thể của bạn là gì? (Tìm tài liệu về \u0026ldquo;java\u0026rdquo;).\nURL là một con trỏ tĩnh, nó chỉ là cái địa chỉ, là thông tin trên bì thư. Nó chưa phải là hành động gửi thư.\nJava\nimport java.net.MalformedURLException;\rimport java.net.URL;\rpublic class URLExplorer {\rpublic static void main(String[] args) {\rtry {\r// Tạo một \u0026#34;bì thư\u0026#34; với địa chỉ đầy đủ\rURL myUrl = new URL(\u0026#34;https://www.example.com/some/page?user=test\u0026#34;);\rSystem.out.println(\u0026#34;Dịch vụ bưu chính (Protocol): \u0026#34; + myUrl.getProtocol());\rSystem.out.println(\u0026#34;Tòa nhà (Host): \u0026#34; + myUrl.getHost());\rSystem.out.println(\u0026#34;Phòng ban (Path): \u0026#34; + myUrl.getPath());\rSystem.out.println(\u0026#34;Yêu cầu cụ thể (Query): \u0026#34; + myUrl.getQuery());\r} catch (MalformedURLException e) {\rSystem.err.println(\u0026#34;Địa chỉ trên bì thư không hợp lệ!\u0026#34;);\r}\r}\r} 3. URLConnection: Người Đưa Thư #\rBạn đã có địa chỉ trên bì thư (URL). Bây giờ, bạn cần một người thực sự đi đến đó, gõ cửa, và bắt đầu giao tiếp. URLConnection chính là người đưa thư đó.\nNó là gì? URLConnection là một kết nối đang hoạt động đến tài nguyên được chỉ định bởi một URL. Nó không còn là thông tin tĩnh nữa, mà là một kênh giao tiếp mở.\nCông dụng: Sau khi bạn đưa \u0026ldquo;bì thư\u0026rdquo; (URL) cho \u0026ldquo;người đưa thư\u0026rdquo; (URLConnection), anh ta sẽ:\nĐi đến địa chỉ và gõ cửa (.connect()): Thiết lập kết nối mạng thực sự.\nNhận phản hồi (.getInputStream()): Mở một \u0026ldquo;đường ống\u0026rdquo; để bạn có thể nhận dữ liệu (nội dung trang web, hình ảnh\u0026hellip;).\nXem thông tin (.getHeaderFields()): Đọc các thông tin meta về phản hồi, giống như xem các con dấu trên bì thư trả lời.\nNó là cây cầu nối giữa chương trình của bạn và tài nguyên ở xa.\nJava\nimport java.io.BufferedReader;\rimport java.io.InputStreamReader;\rimport java.net.URL;\rimport java.net.URLConnection;\rpublic class ConnectionManager {\rpublic static void main(String[] args) {\rtry {\r// 1. Tạo \u0026#34;bì thư\u0026#34;\rURL siteURL = new URL(\u0026#34;https://www.example.com\u0026#34;);\r// 2. Đưa bì thư cho \u0026#34;người đưa thư\u0026#34;\rURLConnection connection = siteURL.openConnection();\r// 3. Yêu cầu người đưa thư bắt đầu làm việc và lấy nội dung về\rtry (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\rSystem.out.println(\u0026#34;Đã kết nối thành công!\u0026#34;);\rSystem.out.println(\u0026#34;Đang đọc nội dung từ example.com...\u0026#34;);\rString line;\r// Chỉ đọc 5 dòng đầu tiên cho ngắn gọn\rfor (int i = 0; i \u0026lt; 5 \u0026amp;\u0026amp; (line = reader.readLine()) != null; i++) {\rSystem.out.println(line);\r}\r}\r} catch (Exception e) {\rSystem.err.println(\u0026#34;Gặp lỗi khi kết nối hoặc đọc dữ liệu: \u0026#34; + e.getMessage());\r}\r}\r} Tổng Kết #\rHãy nhớ mối quan hệ xây dựng này:\nInetAddress là khái niệm cơ bản nhất, chỉ là vị trí (IP).\nURL xây dựng trên đó, thêm nhiều ngữ cảnh hơn để tạo ra một địa chỉ tài nguyên hoàn chỉnh.\nURLConnection là bước cuối cùng, sử dụng URL để tạo ra một kết nối sống cho phép bạn thực sự trao đổi dữ liệu.\nHiểu rõ ba cấp độ này sẽ giúp bạn làm chủ mọi tác vụ mạng trong Java, từ việc đơn giản là kiểm tra một địa chỉ IP cho đến việc tải về toàn bộ nội dung của một trang web.\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/qlnoimang/","section":"Bài viết","summary":"Từ tọa độ IP đến cuộc trò chuyện mạng: hành trình khám phá InetAddress, URL và URLConnection trong Java.","title":"InetAddress, URL, URLConnection: Từ Tra Cứu, Ghi Địa Chỉ, Đến Gửi Thư","type":"posts"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/ipsum/","section":"Tags","summary":"","title":"Ipsum","type":"tags"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/lorem/","section":"Tags","summary":"","title":"Lorem","type":"tags"},{"content":"Chào bạn! Thế giới mạng máy tính nghe có vẻ đầy những từ ngữ đáng sợ, nhưng thực ra, nó hoạt động rất giống cách mà chúng ta gửi thư cho nhau trong thế giới thực. Hãy cùng \u0026ldquo;giải mã\u0026rdquo; nó nhé!\n1. Địa Chỉ IP: Địa Chỉ Nhà Của Bạn Trên Internet #\rHãy tưởng tượng Internet là một thành phố khổng lồ. Mỗi ngôi nhà trong thành phố này (máy tính, điện thoại của bạn\u0026hellip;) cần có một địa chỉ riêng để người đưa thư biết đường mà tìm.\nĐịa chỉ IP (IP Address) chính là địa chỉ nhà đó. Nó là một dãy số độc nhất, ví dụ: 192.168.1.10. Khi máy tính A muốn gửi dữ liệu cho máy tính B, nó cần biết \u0026ldquo;địa chỉ nhà\u0026rdquo; của máy B.\nNhưng ai mà nhớ nổi một đống dãy số cơ chứ? Vì vậy, chúng ta có\u0026hellip;\n2. DNS: Danh Bạ Điện Thoại Khổng Lồ #\rBạn không nhớ số điện thoại của tất cả bạn bè, thay vào đó bạn lưu tên họ vào danh bạ.\nDNS (Domain Name System) chính là danh bạ của Internet.\nBạn gõ google.com (tên người bạn).\nDNS sẽ tự động tra cứu trong \u0026ldquo;danh bạ\u0026rdquo; khổng lồ của nó và tìm ra địa chỉ IP (số điện thoại) tương ứng, ví dụ 142.250.204.78.\nTrình duyệt của bạn sau đó sẽ gửi \u0026ldquo;thư\u0026rdquo; đến đúng địa chỉ số này.\n3. Cổng (Port): Số Phòng Trong Chung Cư #\rNếu Địa chỉ IP là địa chỉ của cả một tòa chung cư, thì Cổng (Port) chính là số phòng cụ thể trong tòa nhà đó.\nMột máy tính có thể chạy nhiều dịch vụ cùng lúc (duyệt web, chơi game, chat\u0026hellip;). Để dữ liệu không bị gửi nhầm chỗ, mỗi dịch vụ sẽ \u0026ldquo;mở\u0026rdquo; ở một \u0026ldquo;cánh cửa\u0026rdquo; (cổng) riêng.\nCổng 80/443: Cánh cửa dành cho việc lướt web.\nCổng 21: Cánh cửa dành cho việc gửi/nhận file.\nKhi bạn truy cập google.com, trình duyệt sẽ gửi thư đến địa chỉ IP của Google và gõ đúng \u0026ldquo;cửa phòng\u0026rdquo; số 443.\n4. Giao Thức (Protocol): Ngôn Ngữ và Quy Tắc Giao Tiếp #\rKhi bạn gặp ai đó, bạn sẽ nói \u0026ldquo;Xin chào\u0026rdquo; và khi ra về thì nói \u0026ldquo;Tạm biệt\u0026rdquo;. Đó là quy tắc giao tiếp.\nGiao thức (Protocol) là bộ quy tắc và ngôn ngữ chung mà các máy tính dùng để \u0026ldquo;nói chuyện\u0026rdquo; với nhau. Hai quy tắc phổ biến nhất là:\nTCP (Giống một cuộc gọi điện thoại 📞): Cẩn thận, chắc chắn. Nó sẽ gọi trước, xác nhận, gửi dữ liệu, kiểm tra xem bên kia có nhận đủ không rồi mới kết thúc. Dùng cho web, email.\nUDP (Giống gửi một tấm bưu thiếp 📮): Nhanh, gọn, lẹ. Cứ thế gửi đi mà không cần biết người nhận có nhận được hay không. Dùng cho xem phim online, chơi game, nơi tốc độ là trên hết.\n(Bạn có thể xem lại các bài viết trước về TCP và UDP để thấy code ví dụ về cách các \u0026ldquo;quy tắc\u0026rdquo; này hoạt động nhé!)\n5. Router và Switch: Bưu Điện và Người Đưa Thư Nội Bộ #\rSwitch: Hãy tưởng tượng nó là người đưa thư trong một tòa nhà. Switch kết nối tất cả các máy tính trong cùng một văn phòng (một mạng cục bộ). Khi phòng A muốn gửi thư cho phòng B, Switch biết chính xác phòng B ở đâu và chỉ giao thư đến đúng phòng đó.\nRouter: Hãy tưởng tượng nó là bưu điện trung tâm của khu phố. Router kết nối mạng văn phòng của bạn với thế giới bên ngoài (Internet). Nó nhận thư từ bạn và quyết định con đường tốt nhất để gửi lá thư đó đến một thành phố khác.\n6. Firewall: Anh Bảo Vệ Khó Tính #\rFirewall (Tường lửa) chính là anh bảo vệ đứng ở cổng tòa nhà của bạn. Anh ta sẽ kiểm tra tất cả các \u0026ldquo;bưu phẩm\u0026rdquo; đi ra đi vào.\nThư từ người quen, có địa chỉ rõ ràng? Cho qua.\nMột gói hàng lạ, trông đáng ngờ từ một người không rõ danh tính? Chặn lại, không cho vào.\nFirewall giúp bảo vệ mạng của bạn khỏi những truy cập không mong muốn và các mối nguy hiểm từ Internet.\nTóm Lại #\rVậy là bạn thấy đó, cả một hệ thống mạng phức tạp có thể được hình dung như một dịch vụ bưu chính khổng lồ:\nBạn có tên (google.com) và nhờ danh bạ (DNS) tìm địa chỉ nhà (IP).\nBạn gửi thư đến đúng số phòng (Port).\nBạn và người nhận nói chuyện theo một ngôn ngữ chung (Protocol).\nNgười đưa thư nội bộ (Switch) sẽ chuyển thư của bạn ra bưu điện trung tâm (Router) để gửi đi xa.\nVà luôn có anh bảo vệ (Firewall) canh gác ở cổng.\nHy vọng qua những ví dụ này, bạn đã thấy các khái niệm mạng trở nên gần gũi và dễ hiểu hơn rất nhiều!\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/networkbasic/","section":"Bài viết","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Mạng Máy Tính Cơ Bản: Dễ Như Gửi Một Bức Thư !","type":"posts"},{"content":"\rChào bạn! Bạn đã bao giờ thắc mắc làm thế nào một email bạn gửi từ Việt Nam có thể đến đúng hòm thư của một người bạn ở Mỹ chỉ trong nháy mắt chưa? Phép màu này không phải là một hành động đơn lẻ, mà là một quy trình gồm nhiều bước được tổ chức cực kỳ thông minh, giống hệt như cách một dịch vụ bưu chính đa quốc gia đóng gói, vận chuyển và giao một món hàng.\nĐể chuẩn hóa quy trình phức tạp này, các kỹ sư đã tạo ra một bản thiết kế gọi là Mô hình OSI (Open Systems Interconnection). Hãy coi nó như một dây chuyền đóng gói và vận chuyển hàng hóa gồm 7 công đoạn (7 tầng).\nDây Chuyền Đóng Gói (Khi bạn gửi dữ liệu đi) #\rKhi bạn gửi một tấm ảnh, nó sẽ được chuyền xuống dây chuyền từ Tầng 7 đến Tầng 1. Tại mỗi công đoạn, gói hàng sẽ được thêm một \u0026ldquo;lớp vỏ\u0026rdquo; hoặc một loại nhãn dán mới.\nTầng 7: Application (Tầng Ứng dụng) - Nơi Bạn Chuẩn Bị Món Hàng #\rĐây là tầng bạn tương tác trực tiếp, là giao diện của chương trình. Khi bạn soạn một email, đính kèm một file, hay bấm nút \u0026ldquo;Gửi\u0026rdquo; trên một ứng dụng chat, bạn đang làm việc ở Tầng 7.\nĐể dễ hình dung: Bạn là khách hàng, đang chọn một món quà (dữ liệu), viết một tấm thiệp (nội dung email), và mang nó đến quầy dịch vụ bưu chính.\nTầng 6: Presentation (Tầng Trình bày) - Người Đóng Gói và Dịch Thuật #\rKhông phải máy tính nào cũng \u0026ldquo;đọc\u0026rdquo; dữ liệu theo cùng một cách. Tầng này đảm bảo rằng dữ liệu của bạn được định dạng theo một tiêu chuẩn chung mà người nhận có thể hiểu được. Nó làm ba việc chính:\nDịch thuật/Định dạng: Chuyển đổi dữ liệu sang một định dạng chuẩn (ví dụ, chuyển ảnh sang .jpeg).\nNén: Nén dữ liệu lại cho nhỏ hơn để gửi đi nhanh hơn.\nMã hóa: Mã hóa dữ liệu để bảo mật, đảm bảo chỉ người nhận mới có thể đọc.\nĐể dễ hình dung: Nhân viên bưu chính dịch tấm thiệp của bạn sang ngôn ngữ quốc tế, hút chân không món quà cho gọn, và đặt nó vào một hộp quà có khóa an toàn.\nTầng 5: Session (Tầng Phiên) - Người Điều Phối Giao Dịch #\rTrước khi gửi một món hàng quan trọng, bạn cần chắc chắn là người nhận sẵn sàng. Tầng này có nhiệm vụ mở, quản lý và đóng \u0026ldquo;phiên giao tiếp\u0026rdquo; giữa hai máy tính.\nĐể dễ hình dung: Nhân viên bưu chính gọi điện cho người nhận: \u0026ldquo;A lô, chúng tôi sắp gửi một gói hàng, ông/bà có nhà để nhận không?\u0026rdquo;. Tầng này đảm bảo kênh liên lạc được thiết lập và duy trì ổn định trong suốt quá trình gửi và nhận.\nTầng 4: Transport (Tầng Giao vận) - Quản Lý Vận Chuyển #\rĐây là một trong những tầng quan trọng nhất. Nó nhận \u0026ldquo;món hàng\u0026rdquo; lớn từ các tầng trên và thực hiện hai nhiệm vụ chính:\nPhân mảnh: \u0026ldquo;Chặt\u0026rdquo; món hàng lớn thành nhiều hộp nhỏ hơn, được đánh số thứ tự để dễ dàng quản lý và vận chuyển.\nChọn dịch vụ: Quyết định phương thức vận chuyển:\nTCP (Giao hàng đảm bảo): Giống như gửi bảo đảm có ký nhận. Dịch vụ sẽ theo dõi từng hộp, đảm bảo chúng đến nơi đúng thứ tự. Nếu có hộp nào bị mất, nó sẽ tự động yêu cầu gửi lại. Đáng tin cậy nhưng tốn nhiều công sức hơn.\nUDP (Giao hàng hỏa tốc): Gửi đi nhanh nhất có thể, không cần xác nhận. Nhanh nhưng chấp nhận rủi ro thất lạc.\nĐể dễ hình dung: Quản lý kho vận chia lô hàng của bạn thành nhiều thùng nhỏ, đánh số từ 1 đến 10, rồi quyết định sẽ dùng dịch vụ chuyển phát bảo đảm (TCP) hay dịch vụ giao hàng siêu tốc (UDP).\nTầng 3: Network (Tầng Mạng) - Dán Địa Chỉ Toàn Cầu và Tìm Đường #\rMỗi hộp nhỏ bây giờ cần biết phải đi đâu trên thế giới. Tầng này dán địa chỉ IP của người gửi và người nhận lên mỗi hộp. Đây là địa chỉ toàn cầu, có đủ thông tin thành phố và quốc gia. Các thiết bị gọi là Router (bưu điện trung tâm) sẽ đọc địa chỉ IP này để tìm ra con đường tốt nhất và nhanh nhất để chuyển các hộp hàng đi.\nĐể dễ hình dung: Mỗi thùng hàng được dán một nhãn ghi rõ: \u0026ldquo;Từ: Hà Nội, Việt Nam\u0026rdquo; đến \u0026ldquo;Đến: New York, Mỹ\u0026rdquo;.\nTầng 2: Data Link (Tầng Liên kết dữ liệu) - Dán Địa Chỉ Nội Bộ #\rKhi gói hàng đã đến đúng thành phố và khu vực của người nhận (tức là vào đúng mạng LAN), nó vẫn cần được giao đến đúng số nhà. Tầng này dán thêm một lớp địa chỉ cục bộ gọi là địa chỉ MAC lên gói hàng. Các thiết bị gọi là Switch (người đưa thư trong khu phố) sẽ đọc địa chỉ này để giao hàng đến chính xác máy tính cần nhận trong mạng nội bộ.\nĐể dễ hình dung: Khi thùng hàng đến bưu cục New York, nhân viên sẽ dán thêm một nhãn nhỏ ghi \u0026ldquo;Giao cho ông John Smith, phòng 301, tòa nhà ABC\u0026rdquo; để người đưa thư địa phương biết đường.\nTầng 1: Physical (Tầng Vật lý) - Xe Tải, Máy Bay và Con Đường #\rĐây là tầng cuối cùng trong dây chuyền. Tất cả các gói hàng với đầy đủ nhãn dán sẽ được chuyển thành các tín hiệu vật lý để có thể di chuyển được. Dữ liệu được biến thành:\nTín hiệu điện qua dây cáp mạng.\nSóng vô tuyến qua Wi-Fi.\nTín hiệu ánh sáng qua cáp quang.\nĐể dễ hình dung: Các thùng hàng được chất lên xe tải, máy bay, tàu thủy (các phương tiện vật lý) và bắt đầu hành trình trên đường cao tốc, đường hàng không (cơ sở hạ tầng vật lý).\nQuy Trình Mở Gói (Khi bạn nhận được dữ liệu) #\rKhi các tín hiệu vật lý đến máy tính của người nhận, một quy trình ngược lại sẽ diễn ra. Gói hàng sẽ đi từ Tầng 1 lên Tầng 7, và mỗi tầng sẽ \u0026ldquo;bóc\u0026rdquo; một lớp vỏ tương ứng, kiểm tra thông tin, rồi chuyển phần lõi lên cho tầng trên, cho đến khi món quà ban đầu (tấm ảnh) hiện ra nguyên vẹn trên màn hình ứng dụng.\nKết Luận #\rViệc phân chia một công việc phức tạp thành 7 bước đơn giản như vậy mang lại một lợi ích khổng lồ: tính module hóa và tiêu chuẩn hóa. Nó cho phép một công ty sản xuất dây cáp mạng (Tầng 1) không cần phải biết về trình duyệt web (Tầng 7) hoạt động ra sao. Mọi người chỉ cần làm tốt công việc ở tầng của mình. Chính nhờ sự phân công lao động hoàn hảo này mà các thiết bị và phần mềm từ hàng ngàn nhà sản xuất khác nhau trên thế giới có thể \u0026ldquo;nói chuyện\u0026rdquo; và hợp tác trơn tru với nhau, tạo nên một Internet thống nhất và mạnh mẽ như chúng ta biết ngày nay.\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/osi/","section":"Bài viết","summary":"Giải thích mô hình OSI 7 tầng bằng ví dụ đơn giản về một dây chuyền gửi hàng, mô tả cách dữ liệu được đóng gói qua từng lớp để chuẩn hóa giao tiếp mạng.","title":"Mô Hình Mạng Máy Tính: Dây Chuyền Gửi Hàng Toàn Cầu","type":"posts"},{"content":"Chào bạn! Hãy tưởng tượng thế giới mạng là một tòa nhà chung cư lớn. Chúng ta đã biết hai cách giao tiếp:\nUnicast (Một-một): Bạn gõ cửa phòng 101 và chỉ nói chuyện với người trong phòng đó. Giống như TCP và UDP cơ bản.\nBroadcast (Một-tất cả): Bạn đứng ở hành lang và hét lên: \u0026ldquo;CHÁY NHÀ!\u0026rdquo;. Tất cả mọi người trong tòa nhà, dù muốn hay không, đều nghe thấy. Điều này rất ồn ào và phiền phức.\nNhưng nếu bạn muốn thông báo cho \u0026ldquo;Câu lạc bộ những người yêu mèo\u0026rdquo; trong tòa nhà về buổi họp mặt tối nay thì sao? Hét lên thì làm phiền người khác, còn gõ cửa từng phòng thì quá mất công.\nĐây là lúc Multicast tỏa sáng!\nMulticast Giống Như Một Kênh Radio Nội Bộ #\rMulticast hoạt động giống như bạn tạo ra một kênh radio riêng cho \u0026ldquo;Câu lạc bộ yêu mèo\u0026rdquo; ở tần số 239.0.0.1.\nBạn (Người gửi): Bạn cầm micro lên và bắt đầu nói vào kênh 239.0.0.1: \u0026ldquo;Tối nay 8 giờ họp ở phòng sinh hoạt chung nhé!\u0026rdquo; Bạn chỉ cần nói một lần duy nhất.\nThành viên CLB (Người nhận): Những ai quan tâm đến mèo sẽ chủ động vặn radio của họ sang đúng kênh 239.0.0.1 để lắng nghe.\nNhững người khác: Những người không quan tâm sẽ không dò kênh này, và họ sẽ không bị làm phiền.\nTóm lại: Multicast là một phương pháp gửi một gói tin duy nhất từ một người gửi đến một nhóm người nhận đã đăng ký \u0026ldquo;lắng nghe\u0026rdquo;. Nó hiệu quả hơn Broadcast (vì không làm phiền tất cả mọi người) và hiệu quả hơn Unicast (vì không phải gửi nhiều bản sao của cùng một gói tin).\nCác \u0026ldquo;Linh Kiện\u0026rdquo; Chính Của Multicast #\rĐể kênh radio này hoạt động, chúng ta cần một vài thứ:\n1. Địa Chỉ Multicast (Các kênh Radio) #\rTrong thế giới IP, các địa chỉ từ 224.0.0.0 đến 239.255.255.255 được dành riêng cho multicast. Mỗi địa chỉ này được gọi là một multicast group, tương ứng với một \u0026ldquo;kênh radio\u0026rdquo;.\nVí dụ: Kênh 224.0.0.2 có thể dùng cho các router nói chuyện với nhau, kênh 239.1.2.3 có thể được ứng dụng của bạn dùng để gửi dữ liệu video.\n2. Giao Thức IGMP (Cái nút \u0026ldquo;Dò Kênh\u0026rdquo;) #\rIGMP (Internet Group Management Protocol) là cách mà máy của người nhận (cái radio) thông báo cho router mạng (người quản lý tòa nhà) rằng: \u0026ldquo;Này, tôi muốn nghe kênh 239.0.0.1 nhé. Nếu có tin gì ở kênh đó thì chuyển cho tôi.\u0026rdquo;\nKhi người dùng không muốn nghe nữa (tắt ứng dụng), máy của họ sẽ dùng IGMP để báo: \u0026ldquo;Tôi không nghe kênh 239.0.0.1 nữa đâu, đừng gửi cho tôi.\u0026rdquo;\nRouter mạng sẽ ghi nhớ xem ở nhánh mạng của mình có ai đang muốn nghe kênh nào, và chỉ chuyển tiếp dữ liệu multicast đến những nhánh có người đăng ký.\nAi Sử Dụng Kênh Radio Multicast Này? #\rMulticast cực kỳ hữu ích trong các ứng dụng cần gửi cùng một dữ liệu đến nhiều người nhận cùng lúc.\nTruyền hình IPTV: #\rĐây là ứng dụng phổ biến nhất. Thay vì nhà cung cấp phải tạo một luồng video riêng cho mỗi hộ gia đình đang xem VTV3 (Unicast), họ chỉ cần phát luồng video VTV3 đó vào một địa chỉ multicast.\nHàng ngàn hộ gia đình chỉ cần \u0026ldquo;dò\u0026rdquo; đúng kênh multicast đó để xem. Điều này tiết kiệm băng thông một cách khổng lồ!\nCập nhật thông tin thị trường chứng khoán: #\rDữ liệu giá cổ phiếu thay đổi liên tục và cần được gửi đến hàng ngàn nhà đầu tư ngay lập tức. Multicast là giải pháp hoàn hảo để đẩy những cập nhật này đi một cách nhanh chóng và đồng bộ.\nChơi game online: #\rTrong một số game, dữ liệu về trạng thái của môi trường game (ví dụ: thời tiết thay đổi, một sự kiện trong game xảy ra) có thể được gửi qua multicast đến tất cả người chơi trong cùng một khu vực.\nKhám phá dịch vụ (Service Discovery): #\rCác thiết bị trong mạng cục bộ có thể gửi một gói tin multicast để hỏi: \u0026ldquo;Có máy in nào ở đây không?\u0026rdquo; và các máy in sẽ lắng nghe trên kênh đó để trả lời.\nVí Dụ Code: Tạo Một \u0026ldquo;Kênh Chat\u0026rdquo; Nội Bộ Bằng Multicast #\rHãy xem cách tạo một \u0026ldquo;kênh radio\u0026rdquo; đơn giản trong Java. Một người sẽ nói (gửi), và nhiều người khác có thể nghe (nhận).\n1. MulticastSender.java (Người nói vào radio) #\rJava\nimport java.net.DatagramPacket;\rimport java.net.DatagramSocket;\rimport java.net.InetAddress;\rpublic class MulticastSender {\rpublic static void main(String[] args) throws Exception {\r// Địa chỉ kênh radio mà chúng ta sẽ phát\rInetAddress group = InetAddress.getByName(\u0026#34;239.0.0.1\u0026#34;);\rint port = 4446;\r// Tạo một socket để gửi đi\rDatagramSocket socket = new DatagramSocket();\rString msg = \u0026#34;Xin chào các thành viên CLB yêu mèo!\u0026#34;;\rbyte[] buffer = msg.getBytes();\r// Đóng gói tin nhắn vào một DatagramPacket gửi đến địa chỉ group và cổng đã định\rDatagramPacket packet = new DatagramPacket(buffer, buffer.length, group, port);\r// Gửi đi! Chỉ cần gửi 1 lần duy nhất\rsocket.send(packet);\rSystem.out.println(\u0026#34;Đã gửi tin nhắn: \u0026#39;\u0026#34; + msg + \u0026#34;\u0026#39;\u0026#34;);\rsocket.close();\r}\r} 2. MulticastReceiver.java (Người nghe radio - có thể chạy nhiều receiver cùng lúc) #\rJava\nimport java.net.DatagramPacket;\rimport java.net.InetAddress;\rimport java.net.MulticastSocket;\rpublic class MulticastReceiver {\rpublic static void main(String[] args) throws Exception {\r// Địa chỉ kênh radio mà chúng ta muốn nghe\rInetAddress group = InetAddress.getByName(\u0026#34;239.0.0.1\u0026#34;);\rint port = 4446;\r// Tạo một MulticastSocket để nghe trên cổng cụ thể\rMulticastSocket socket = new MulticastSocket(port);\r// Dùng IGMP để báo cho router rằng \u0026#34;Tôi muốn tham gia kênh này\u0026#34;\rsocket.joinGroup(group);\rSystem.out.println(\u0026#34;Đã dò kênh \u0026#34; + group.getHostAddress() + \u0026#34;. Đang chờ tin nhắn...\u0026#34;);\rbyte[] buffer = new byte[1024];\rDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\r// Chờ nhận tin nhắn\rsocket.receive(packet);\rString received = new String(packet.getData(), 0, packet.getLength());\rSystem.out.println(\u0026#34;Nhận được tin: \u0026#39;\u0026#34; + received + \u0026#34;\u0026#39;\u0026#34;);\r// Rời khỏi kênh\rsocket.leaveGroup(group);\rsocket.close();\r}\r} Kết Luận #\rMulticast là một kỹ thuật mạng cực kỳ thông minh và hiệu quả. Nó là sự cân bằng hoàn hảo giữa việc \u0026ldquo;nói riêng\u0026rdquo; cho từng người và \u0026ldquo;hét to\u0026rdquo; cho tất cả mọi người. Bằng cách tạo ra các nhóm đăng ký tự nguyện, multicast giúp tiết kiệm tài nguyên mạng và đảm bảo thông tin được gửi đến đúng đối tượng một cách nhanh chóng.\n","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/multicast/","section":"Bài viết","summary":"Giải thích Multicast là việc gửi thông tin đến một nhóm người nhận đã đăng ký, như kênh radio nội bộ. Hiệu quả hơn Unicast/Broadcast, nó được dùng trong IPTV, game online, và thị trường chứng khoán để tiết kiệm băng thông và đảm bảo tốc độ.","title":"Multicast: Khi Bạn Nói Chuyện Một Nhóm, Nhưng Chỉ Ai Muốn Nghe Mới Nghe Thấy","type":"posts"},{"content":"","date":"17 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/tags/network/","section":"Tags","summary":"","title":"Network","type":"tags"},{"content":"Chào bạn! Trong thế giới mạng máy tính, có hai \u0026ldquo;anh em\u0026rdquo; giao hàng nổi tiếng mà bạn sẽ nghe đi nghe lại: TCP và UDP. Nếu ở bài trước, chúng ta đã gặp UDP, \u0026lsquo;gã giao hàng siêu tốc\u0026rsquo; nhưng hay làm mất hàng, thì hôm nay chúng ta sẽ tìm hiểu người anh cẩn thận của nó: TCP (Transmission Control Protocol).\nTCP chính là người nhân viên giao hàng cẩn thận, luôn gọi điện xác nhận, giao đúng thứ tự, và yêu cầu bạn ký nhận. Mọi thứ chậm hơn một chút, nhưng cực kỳ đáng tin cậy.\nTCP (Transmission Control Protocol) giống như một cuộc điện thoại #\rĐây là một quy trình giao tiếp đầy đủ, có đầu có cuối và cực kỳ nghiêm túc.\n- 1. Bấm số (\u0026ldquo;Bắt tay ba bước\u0026rdquo;): Bạn không thể nói chuyện ngay. Bạn phải:\nBạn: Bấm số và gọi (\u0026ldquo;A lô, tôi gọi đây!\u0026rdquo; - Gói SYN)\nNgười nhận: Nhấc máy (\u0026ldquo;Tôi nghe đây, tôi sẵn sàng!\u0026rdquo; - Gói SYN-ACK)\nBạn: Xác nhận (\u0026ldquo;Ok, tôi bắt đầu nói đây!\u0026rdquo; - Gói ACK) Chỉ sau khi \u0026ldquo;cuộc gọi\u0026rdquo; được kết nối, dữ liệu mới bắt đầu được gửi.\n- 2. Trò chuyện (Truyền dữ liệu có thứ tự \u0026amp; Kiểm soát lỗi):\nĐúng thứ tự: Khi bạn nói \u0026ldquo;Câu 1, Câu 2, Câu 3\u0026rdquo;, người nghe sẽ nhận được đúng thứ tự đó. TCP đánh số các gói tin để đảm bảo điều này.\nCó xác nhận: Sau khi bạn nói một đoạn, người nghe sẽ \u0026ldquo;ờ, ừm\u0026rdquo; (gửi ACK) để báo là đã nghe rõ.\nGửi lại nếu mất: Nếu người nghe không nghe rõ (gói tin bị mất), họ sẽ yêu cầu: \u0026ldquo;Bạn nói lại được không?\u0026rdquo;. TCP sẽ tự động gửi lại gói tin bị thất lạc.\n- 3. Chào tạm biệt (Đóng kết nối): Khi nói xong, cả hai cùng nói \u0026ldquo;Tạm biệt\u0026rdquo; rồi mới gác máy. Kết nối được đóng lại một cách lịch sự, đảm bảo không còn dữ liệu nào bị lỡ.\n=\u0026gt; Đặc điểm của TCP: Cực kỳ tin cậy, đảm bảo dữ liệu đến nơi, đúng thứ tự, và không bị lỗi. Nhưng đổi lại, nó có nhiều thủ tục hơn và chậm hơn một chút.\nVậy, Khi Nào Cần Một Người Giao Hàng \u0026lsquo;Chắc Cú\u0026rsquo;? #\rNếu UDP là người hùng của livestream và game, thì TCP là nền tảng của gần như mọi thứ còn lại trên Internet. Bạn không thể chấp nhận sự mất mát dữ liệu trong các tình huống sau:\n- 1. Tải một Trang Web (HTTP/HTTPS):\nVấn đề: Bạn không thể chấp nhận một trang web bị mất một nửa file HTML hay một đoạn CSS. Nếu vậy, trang web sẽ bị vỡ hoàn toàn.\nGiải pháp TCP: Đảm bảo mọi ký tự, mọi file ảnh, mọi file CSS đều được tải về đầy đủ và lắp ráp đúng thứ tự.\n- 2. Gửi và Nhận Email (SMTP/IMAP):\nVấn đề: Một email bị mất vài chữ có thể thay đổi hoàn toàn ý nghĩa.\nGiải pháp TCP: Đảm bảo nội dung email của bạn được gửi đi hoặc nhận về một cách nguyên vẹn 100%.\n- 3. Tải File (FTP):\nVấn đề: Một file cài đặt phần mềm hay một file nén bị lỗi dù chỉ một bit cũng có thể trở nên vô dụng.\nGiải pháp TCP: Đảm bảo file bạn tải về giống hệt 100% so với file gốc trên máy chủ.\nNguyên tắc vàng: Nếu dữ liệu của bạn không được phép mất mát hay sai thứ tự dù chỉ một chút, hãy dùng TCP.\nVí Dụ Code: Một Cuộc Trò Chuyện (Chat) Bằng TCP #\rHãy xem cách \u0026ldquo;thực hiện cuộc gọi\u0026rdquo; trong Java hoạt động như thế nào. Chúng ta sẽ có một Server (người nghe điện thoại) và một Client (người gọi đến).\nTCPServer.java (Người nghe điện thoại) #\rJava\nimport java.io.BufferedReader;\rimport java.io.InputStreamReader;\rimport java.io.PrintWriter;\rimport java.net.ServerSocket;\rimport java.net.Socket;\rpublic class TCPServer {\rpublic static void main(String[] args) throws Exception {\rSystem.out.println(\u0026#34;Server đã sẵn sàng, đang chờ cuộc gọi...\u0026#34;);\r// 1. Tạo một \u0026#34;tổng đài\u0026#34; (ServerSocket) chờ ở cổng 6789\rServerSocket welcomeSocket = new ServerSocket(6789);\rwhile (true) {\r// 2. Chấp nhận một cuộc gọi đến (accept()). // Chương trình sẽ dừng ở đây cho đến khi có Client gọi.\rSocket connectionSocket = welcomeSocket.accept();\rSystem.out.println(\u0026#34;Client đã kết nối!\u0026#34;);\r// 3. Tạo luồng để \u0026#34;nghe\u0026#34; từ Client\rBufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));\r// 4. Tạo luồng để \u0026#34;nói\u0026#34; với Client\rPrintWriter outToClient = new PrintWriter(connectionSocket.getOutputStream(), true);\r// 5. Nghe Client nói\rString clientSentence = inFromClient.readLine();\rSystem.out.println(\u0026#34;Client nói: \u0026#34; + clientSentence);\r// 6. Trả lời Client\routToClient.println(\u0026#34;Server đã nhận được tin nhắn của bạn!\u0026#34;);\r// 7. Gác máy (đóng kết nối với client này)\rconnectionSocket.close();\r}\r}\r} TCPClient.java (Người gọi điện) #\rJava\nimport java.io.BufferedReader;\rimport java.io.InputStreamReader;\rimport java.io.PrintWriter;\rimport java.net.Socket;\rpublic class TCPClient {\rpublic static void main(String[] args) throws Exception {\r// 1. Lấy \u0026#34;điện thoại\u0026#34; (Socket) và gọi đến \u0026#34;localhost\u0026#34; ở cổng 6789\rSocket clientSocket = new Socket(\u0026#34;localhost\u0026#34;, 6789);\rSystem.out.println(\u0026#34;Đã kết nối tới Server.\u0026#34;);\r// 2. Chuẩn bị để gõ tin nhắn (từ bàn phím)\rBufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));\r// 3. Tạo luồng để \u0026#34;nói\u0026#34; với Server\rPrintWriter outToServer = new PrintWriter(clientSocket.getOutputStream(), true);\r// 4. Tạo luồng để \u0026#34;nghe\u0026#34; Server trả lời\rBufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\r// 5. Gõ một câu\rSystem.out.print(\u0026#34;Nhập tin nhắn để gửi: \u0026#34;);\rString sentence = inFromUser.readLine();\r// 6. Gửi câu đó cho Server\routToServer.println(sentence);\r// 7. Nghe Server phản hồi\rString serverResponse = inFromServer.readLine();\rSystem.out.println(\u0026#34;Server trả lời: \u0026#34; + serverResponse);\r// 8. Gác máy\rclientSocket.close();\r}\r} Kết Luận #\rTCP chính là nền tảng vững chắc cho phần lớn những gì chúng ta làm trên Internet hàng ngày. Nó có thể không nhanh bằng UDP, nhưng sự cẩn thận và đáng tin cậy của nó là không thể thay thế.\nGiống như trong cuộc sống, đôi khi bạn cần một tấm bưu thiếp nhanh gọn (UDP), nhưng trong hầu hết các trường hợp quan trọng, bạn cần một cuộc gọi điện thoại nghiêm túc (TCP).\n","date":"14 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/tcp/","section":"Bài viết","summary":"Giải thích TCP bằng ẩn dụ \u0026lsquo;cuộc điện thoại\u0026rsquo;: tin cậy, có kết nối, đảm bảo thứ tự. Trái ngược với UDP (\u0026lsquo;bưu thiếp\u0026rsquo; tốc độ). Hoàn hảo cho các ứng dụng yêu cầu sự toàn vẹn dữ liệu như web, email.","title":"TCP: Người Giao Hàng 'Chắc Cú' Nhất Quả Đất","type":"posts"},{"content":"\rChào bạn! Trong thế giới mạng máy tính, có hai \u0026ldquo;anh em\u0026rdquo; giao hàng nổi tiếng mà bạn sẽ nghe đi nghe lại: TCP và UDP. Nếu TCP là một nhân viên giao hàng cực kỳ cẩn thận, luôn gọi điện xác nhận trước khi đi, giao đúng thứ tự, và yêu cầu ký nhận\u0026hellip; thì UDP chính là gã giao hàng trái ngược hoàn toàn: phóng khoáng, siêu tốc, nhưng hơi đoảng. Hôm nay, chúng ta hãy tìm hiểu về gã \u0026ldquo;não cá vàng\u0026rdquo; thú vị này nhé!\rUDP (User Datagram Protocol) giống như gửi một tấm bưu thiếp #\rKhông cần gọi trước: Bạn chỉ cần viết địa chỉ người nhận lên bưu thiếp rồi thả vào hòm thư. Bạn không cần gọi điện hỏi \u0026ldquo;Ê, tôi sắp gửi bưu thiếp cho ông nhé?\u0026rdquo;. Đây được gọi là \u0026ldquo;không kết nối\u0026rdquo; (connectionless).\nKhông đảm bảo:\nBưu thiếp có thể bị thất lạc trên đường đi.\nNếu bạn gửi 3 tấm bưu thiếp liên tiếp, chúng có thể đến nơi không theo thứ tự. Tấm thứ 3 có thể đến trước tấm thứ 1.\nKhông ai gọi lại báo cho bạn là \u0026ldquo;Tôi nhận được bưu thiếp rồi nhé!\u0026rdquo;.\nSiêu nhẹ, siêu nhanh: Vì bỏ qua hết các thủ tục xác nhận rườm rà, việc gửi một tấm bưu thiếp cực kỳ nhanh và đơn giản.\n=\u0026gt; Đặc điểm của UDP: Siêu nhanh, gọn nhẹ, nhưng không đảm bảo dữ liệu sẽ đến, không đảm bảo đến đúng thứ tự.\nTrường Hợp Sử Dung Giao Thức UDP #\rKhoan Đã\u0026hellip; Vậy Ai Lại Dùng Một Dịch Vụ \u0026ldquo;Không Đáng Tin Cậy\u0026rdquo;? Nghe thì có vẻ UDP rất tệ, nhưng nó lại là người hùng trong rất nhiều trường hợp mà tốc độ được ưu tiên hơn sự hoàn hảo.\nHãy nghĩ xem, bạn có cần sự cẩn thận của một cuộc điện thoại trong các tình huống sau không?\nXem Livestream, Gọi Video:\nVấn đề: Khi bạn đang xem bóng đá trực tiếp, việc hình ảnh bị vỡ một vài khung hình (do mất gói tin UDP) trong một giây còn hơn là cả video bị đứng hình 2-3 giây để chờ tải lại gói tin bị mất đó (nếu dùng TCP).\nGiải pháp UDP: Cứ liên tục gửi dữ liệu hình ảnh mới nhất. Mất một vài khung hình cũ cũng không sao, miễn là bạn đang xem được diễn biến hiện tại.\nChơi Game Online:\nVấn đề: Trong một game bắn súng, vị trí của đối thủ phải được cập nhật ngay lập tức. Dữ liệu về vị trí của họ 1 giây trước đã hoàn toàn vô dụng.\nGiải pháp UDP: Gửi liên tục vị trí mới nhất của người chơi. Nếu một gói tin vị trí bị mất, không sao cả, vì gói tin ngay sau đó sẽ cập nhật vị trí mới hơn. Chậm trễ một chút thôi là bạn đã \u0026ldquo;lên bảng đếm số\u0026rdquo; rồi!\nHệ thống phân giải tên miền (DNS):\nVấn đề: Khi bạn gõ google.com vào trình duyệt, máy tính cần hỏi máy chủ DNS: \u0026ldquo;IP của https://www.google.com/urlsa=Esource=gmailq=google.com là gì?\u0026rdquo;. Đây là một câu hỏi rất nhỏ.\nGiải pháp UDP: Gửi đi một câu hỏi nhỏ và nhận về một câu trả lời nhỏ. Dùng UDP cực nhanh. Nếu lỡ gói tin bị mất, máy tính chỉ đơn giản là hỏi lại. Nhanh hơn nhiều so với việc thiết lập cả một kết nối TCP chỉ để hỏi một câu đơn giản.\nNguyên tắc vàng: Nếu dữ liệu mới nhất luôn quan trọng hơn dữ liệu cũ, và việc mất mát một chút dữ liệu có thể chấp nhận được, hãy dùng UDP!\nVí Dụ Code: Gửi và Nhận Tin Nhắn Bằng UDP #\rHãy xem cách \u0026ldquo;gửi bưu thiếp\u0026rdquo; trong Java hoạt động như thế nào. Chúng ta sẽ có một Server (người nhận thư) và một Client (người gửi thư).\r1. UDPServer.java (Người nhận thư) #\rJava\nimport java.net.DatagramPacket;\rimport java.net.DatagramSocket;\rimport java.net.InetAddress;\rpublic class UDPServer {\rpublic static void main(String[] args) throws Exception {\r// 1. Mở một \u0026#34;hòm thư\u0026#34; (socket) tại cổng 9876\rDatagramSocket serverSocket = new DatagramSocket(9876);\rSystem.out.println(\u0026#34;Server đang chạy và chờ nhận bưu thiếp...\u0026#34;);\rwhile (true) {\r// 2. Chuẩn bị một chỗ trống để chứa bưu thiếp sắp tới\rbyte[] receiveData = new byte[1024];\rDatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r// 3. Chờ và nhận bưu thiếp\rserverSocket.receive(receivePacket);\r// 4. Mở bưu thiếp ra xem\rString sentence = new String(receivePacket.getData()).trim();\rSystem.out.println(\u0026#34;ĐÃ NHẬN: \u0026#34; + sentence);\r// (Tùy chọn) Gửi lại thư cảm ơn. Lấy địa chỉ từ chính bưu thiếp vừa nhận.\rInetAddress IPAddress = receivePacket.getAddress();\rint port = receivePacket.getPort();\rString capitalizedSentence = \u0026#34;Server da nhan duoc: \u0026#34; + sentence.toUpperCase();\rbyte[] sendData = capitalizedSentence.getBytes();\rDatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);\rserverSocket.send(sendPacket);\r}\r}\r} 2. UDPClient.java (Người gửi thư) #\rJava\nimport java.io.BufferedReader;\rimport java.io.InputStreamReader;\rimport java.net.DatagramPacket;\rimport java.net.DatagramSocket;\rimport java.net.InetAddress;\rpublic class UDPClient {\rpublic static void main(String[] args) throws Exception {\r// 1. Lấy một cái bút và giấy để viết thư\rBufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));\r// 2. Tạo một hòm thư của riêng mình để gửi và có thể nhận lại thư trả lời\rDatagramSocket clientSocket = new DatagramSocket();\r// 3. Tìm địa chỉ của người nhận (ở đây là máy của mình - localhost)\rInetAddress IPAddress = InetAddress.getByName(\u0026#34;localhost\u0026#34;);\rSystem.out.print(\u0026#34;Nhập tin nhắn để gửi: \u0026#34;);\rString sentence = inFromUser.readLine();\rbyte[] sendData = sentence.getBytes();\r// 4. Tạo một tấm bưu thiếp chứa: nội dung, độ dài, địa chỉ và cổng của người nhận\rDatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\r// 5. Thả vào hòm thư và quên nó đi!\rclientSocket.send(sendPacket);\rSystem.out.println(\u0026#34;Đã gửi bưu thiếp!\u0026#34;);\r// (Tùy chọn) Chờ nhận thư cảm ơn\rbyte[] receiveData = new byte[1024];\rDatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\rclientSocket.receive(receivePacket);\rString modifiedSentence = new String(receivePacket.getData()).trim();\rSystem.out.println(\u0026#34;THƯ TRẢ LỜI TỪ SERVER: \u0026#34; + modifiedSentence);\r// 6. Đóng hòm thư\rclientSocket.close();\r}\r} Kết Luận #\rUDP không phải là phiên bản \u0026ldquo;lỗi\u0026rdquo; của TCP. Nó là một công cụ chuyên dụng, được thiết kế cho những công việc mà tốc độ là tất cả. Giống như trong cuộc sống, đôi khi bạn cần một cuộc gọi điện thoại nghiêm túc (TCP), nhưng cũng có lúc, một tấm bưu thiếp nhanh gọn (UDP) lại là lựa chọn hoàn hảo.\nHy vọng qua ví dụ này, bạn đã không còn thấy UDP xa lạ nữa!\n","date":"14 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/udp/","section":"Bài viết","summary":"Giải thích UDP bằng ẩn dụ \u0026lsquo;gửi bưu thiếp\u0026rsquo;: nhanh, không kết nối, nhưng không đáng tin cậy. Trái ngược với TCP (\u0026lsquo;cuộc điện thoại\u0026rsquo; tin cậy). Hoàn hảo cho các ứng dụng ưu tiên tốc độ hơn sự hoàn hảo như livestream hay game online.","title":"UDP: Gã Giao Hàng Siêu Tốc Nhưng... Dễ Mất Hàng.","type":"posts"},{"content":"Chào bạn! Mọi chương trình máy tính hữu ích đều cần giao tiếp với thế giới bên ngoài: đọc một file, lấy dữ liệu từ mạng, nhận thông tin từ bàn phím, hoặc ghi kết quả ra màn hình. Trong Java, tất cả những hoạt động này được thực hiện thông qua một khái niệm mạnh mẽ và đồng nhất gọi là Streams (Luồng). Hãy quên đi những định nghĩa phức tạp. Hãy tưởng tượng I/O Streams đơn giản là một hệ thống đường ống nước.\nNguồn dữ liệu (file, bàn phím, mạng) là một cái hồ chứa nước.\nĐích đến (file, màn hình, mạng) là một cái bể chứa.\nStream chính là đường ống nối từ hồ đến bể.\nDữ liệu là dòng nước chảy trong ống.\nNhập (Input): Bạn đang lắp ống để lấy nước từ hồ về (Đọc dữ liệu).\nXuất (Output): Bạn đang lắp ống để xả nước vào bể (Ghi dữ liệu).\nHai Loại Đường Ống Cơ Bản #\rTrong thế giới Java I/O, có hai loại \u0026ldquo;chất liệu\u0026rdquo; ống chính mà bạn phải chọn.\n1. Byte Streams: Đường Ống Nước Thô #\rTên gọi: Các lớp có đuôi là InputStream (nhập) và OutputStream (xuất). Ví dụ: FileInputStream, FileOutputStream.\nCông dụng: Đây là loại ống cơ bản nhất, vận chuyển nước ở dạng nguyên bản nhất của nó – từng byte một. Nó không quan tâm \u0026ldquo;nước\u0026rdquo; đó là gì, có thể là nước uống, nước bùn, nước màu\u0026hellip;\nKhi nào dùng: Hoàn hảo để vận chuyển dữ liệu không phải là văn bản, như hình ảnh, file âm thanh, video, file đã mã hóa. Bất cứ thứ gì mà việc đọc từng ký tự không có ý nghĩa.\n2. Character Streams: Đường Ống Có Bộ Lọc Thông Minh #\rTên gọi: Các lớp có đuôi là Reader (nhập) và Writer (xuất). Ví dụ: FileReader, FileWriter.\nCông dụng: Đây là loại ống cao cấp hơn, có gắn sẵn một \u0026ldquo;bộ lọc\u0026rdquo; thông minh. Nó nhận vào dòng nước thô (bytes) và tự động chuyển đổi nó thành nước uống sạch (ký tự - characters). Bộ lọc này biết cách xử lý các bảng mã ký tự phức tạp như UTF-8 hay ASCII.\nKhi nào dùng: Luôn luôn sử dụng loại ống này khi bạn làm việc với dữ liệu văn bản (text files). Nó giúp bạn tránh được các lỗi hiển thị ký tự (ví dụ: \u0026ldquo;Nguyễn Văn A\u0026rdquo; bị biến thành \u0026ldquo;Nguy?n V?n A\u0026rdquo;).\nSiêu Năng Lực Của Các \u0026ldquo;Phụ Kiện\u0026rdquo; Lắp Ghép (Decorator Pattern) #\rĐiều tuyệt vời nhất (và cũng hơi rối rắm nhất) của Java I/O là bạn có thể lắp ghép các loại ống và phụ kiện lại với nhau để tạo ra một đường ống siêu mạnh.\nHãy tưởng tượng cái ống FileInputStream cơ bản giống như một cái ống hút nhỏ. Bạn phải hút từng giọt nước một từ hồ. Rất chậm và mệt mỏi! Để giải quyết, Java cung cấp các \u0026ldquo;phụ kiện\u0026rdquo; (các lớp Wrapper) để bọc bên ngoài ống cơ bản.\nPhụ Kiện Phổ Biến Nhất: Buffered\u0026hellip; (Bể Chứa Đệm) #\rTên gọi: BufferedInputStream, BufferedReader, BufferedOutputStream, BufferedWriter.\nCông dụng: Thay vì lắp ống hút thẳng xuống hồ, bạn lắp một cái thùng chứa (buffer) ở giữa. Phụ kiện này sẽ múc một xô nước đầy từ hồ lên thùng chứa một lần. Sau đó, bạn chỉ cần lấy nước từ cái thùng đó thôi, nhanh hơn rất nhiều.\nCách hoạt động: Thay vì đọc/ghi từng byte/ký tự một từ ổ đĩa (một thao tác rất chậm), Buffered\u0026hellip; sẽ đọc/ghi một khối dữ liệu lớn vào bộ nhớ đệm một lần, giúp tăng hiệu suất lên đáng kể.\nQuy tắc vàng: Luôn luôn bọc các luồng I/O cơ bản của bạn bằng một luồng Buffered tương ứng! new BufferedReader(new FileReader(\u0026ldquo;data.txt\u0026rdquo;));\nCode Ví Dụ Kinh Điển: Đọc và Ghi File Text #\rHãy xem cách xây dựng một \u0026ldquo;hệ thống đường ống\u0026rdquo; hoàn chỉnh để đọc nội dung từ file này và ghi sang file khác, sử dụng các phụ kiện tốt nhất.\nJava\nimport java.io.BufferedReader;\rimport java.io.BufferedWriter;\rimport java.io.FileReader;\rimport java.io.FileWriter;\rimport java.io.IOException;\rpublic class FileIOExample {\rpublic static void main(String[] args) {\rString inputFile = \u0026#34;input.txt\u0026#34;;\rString outputFile = \u0026#34;output.txt\u0026#34;;\r// Cú pháp \u0026#34;try-with-resources\u0026#34; (từ Java 7+)\r// Tự động đóng các \u0026#34;đường ống\u0026#34; sau khi dùng xong, cực kỳ an toàn!\r// Giống như van nước tự động khóa lại để tránh rò rỉ.\rtry (\r// Xây dựng đường ống ĐỌC:\r// Ống FileReader cơ bản nối vào file, được bọc bởi phụ kiện BufferedReader\rBufferedReader reader = new BufferedReader(new FileReader(inputFile));\r// Xây dựng đường ống GHI:\r// Ống FileWriter cơ bản nối vào file, được bọc bởi phụ kiện BufferedWriter\rBufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))\r) {\rString currentLine;\rSystem.out.println(\u0026#34;Bắt đầu đọc file...\u0026#34;);\r// reader.readLine() là một phương thức tiện lợi của BufferedReader\r// để đọc từng dòng văn bản một.\rwhile ((currentLine = reader.readLine()) != null) {\rSystem.out.println(\u0026#34;Đã đọc: \u0026#34; + currentLine);\r// Ghi dòng vừa đọc vào file output, và thêm ký tự xuống dòng\rwriter.write(currentLine);\rwriter.newLine(); }\rSystem.out.println(\u0026#34;Đã ghi file thành công!\u0026#34;);\r} catch (IOException e) {\r// Xử lý nếu có lỗi (ví dụ: file không tồn tại)\re.printStackTrace();\r}\r}\r} Kết Luận #\rQuản lý luồng Nhập/Xuất trong Java ban đầu có thể trông đáng sợ với rất nhiều lớp khác nhau, nhưng khi bạn nắm được tư tưởng cốt lõi:\nLuồng là đường ống dữ liệu.\nChọn đúng loại ống: Byte Streams cho file nhị phân (ảnh, video), Character Streams cho file văn bản.\nLuôn lắp thêm phụ kiện Buffered\u0026hellip; để tăng tốc độ.\nLuôn dùng try-with-resources để quản lý đường ống một cách an toàn và tự động.\nBạn sẽ thấy rằng việc xử lý dữ liệu trong Java trở nên rất logic và linh hoạt.\n","date":"4 October 2025","externalUrl":null,"permalink":"/phandinhtuan.dev/posts/io/","section":"Bài viết","summary":"Bài viết giải thích Java I/O Streams qua ví dụ đường ống nước, phân biệt rõ Byte Streams (cho file nhị phân) và Character Streams (cho file text). Bài viết cũng nhấn mạnh việc dùng các lớp Buffered (bộ đệm) để tăng hiệu suất đọc/ghi file.","title":"Luồng Nhập/Xuất (I/O Streams) Trong Java","type":"posts"},{"content":"\rGiới Thiệu Bản Thân #\rXin chào, tôi là Phan Đình Tuấn. Tôi là một nhà phát triển phần mềm với niềm đam mê kiến tạo nên những giải pháp công nghệ vững chắc và ý nghĩa. Với tôi, mỗi dòng code không chỉ là logic, mà còn là một bước trên hành trình không ngừng học hỏi và chinh phục những thách thức kỹ thuật phức tạp.\nNiềm đam mê của tôi với công nghệ bắt đầu từ sự tò mò về cách các chương trình máy tính hoạt động. Sự tò mò ấy đã dẫn lối tôi đến với thế giới lập trình, và tôi quyết định theo đuổi nó một cách nghiêm túc. Tôi đã tự mình khám phá và xây dựng nền tảng vững chắc với các công nghệ mới.\nKể từ đó, tôi luôn nỗ lực để nâng cao kiến thức học thuật, đồng thời áp dụng chúng vào các dự án cá nhân, đặc biệt trong lĩnh vực lập trình phần mềm, nhằm mở rộng hiểu biết, mài giũa kỹ năng và khám phá sâu hơn giới hạn của bản thân.\nTrong công việc, tôi luôn nỗ lực hết mình và tin rằng chất lượng sản phẩm là thước đo giá trị chính xác nhất. Tôi muốn khẳng định bản thân qua hiệu quả của giải pháp mình tạo ra hơn là lời nói. Tôi yêu thích việc phân tích vấn đề một cách có hệ thống và luôn có trách nhiệm tìm ra hướng đi tối ưu nhất để giải quyết các bài toán kỹ thuật.\nDù phần lớn thời gian gắn bó với máy tính và những dòng code, tôi vẫn trân trọng những khoảng thời gian riêng để đọc các bài viết chuyên sâu về công nghệ hoặc nghe một bản nhạc yêu thích. Sở thích của tôi là sưu tầm những giải pháp kỹ thuật hay, những kiến trúc hệ thống độc đáo, chúng không chỉ phản ánh tư duy của tôi mà còn là nguồn động lực để tôi tiến về phía trước.\nHiện tại, tôi đang tìm kiếm một môi trường năng động, chuyên nghiệp, nơi cho phép tôi được học hỏi và phát triển. Vui lòng dành chút thời gian để xem qua hồ sơ năng lực của tôi nhé.\n","externalUrl":null,"permalink":"/phandinhtuan.dev/aboutme/","section":"","summary":"","title":"","type":"page"},{"content":"\rHọc Vấn #\rKỹ Sư Công Nghệ Phần Mềm #\rĐại Học Công Nghệ Tp Hồ Chí Minh(HUTECH) - Thủ Đức Campus | Tháng 8 Năm 2025 - Hiện tại #\rHUTECH là trường đại học tư thục đào tạo đa ngành tại Việt Nam. Năm 2024, HUTECH đạt chuẩn đánh giá quốc tế QS Stars 4 Sao chu kỳ 2 theo Bộ chuẩn mới QS Stars phiên bản 6.0 ban hành vào tháng 02/2024.\nXuyên suốt quá trình học tập tại giảng đường, tôi đã xây dựng được một nền tảng kiến thức tốt về các nguyên lý kỹ thuật phần mềm, được thể hiện qua kết quả học tập tốt ở các môn học chuyên ngành. Tôi không chỉ tập trung vào việc nắm vững lý thuyết ở trường, mà còn chủ động tìm cách áp dụng những kiến thức này vào các đồ án thực tế, coi đó là cầu nối quan trọng nhất để chuẩn bị cho các dự án trong môi trường làm việc chuyên nghiệp.\rCác Dự Án Đã Tham Gia #\rQuản Lý Rạp Chiếu Phim #\rHọc Phần Lập Trình Trên Môi Trường Window - Tháng 12 Năm 2025 - Tháng 1 Năm 2026 #\rGithub Dự Án\r\u0026ldquo;Ứng dụng Quản lý Rạp Chiếu Phim\u0026rdquo; là một giải pháp phần mềm desktop được thiết kế để tối ưu hóa và đơn giản hóa quy trình vận hành tại các rạp chiếu phim. Với giao diện trực quan và các chức năng quản lý , ứng dụng giúp nhân viên dễ dàng thực hiện các nghiệp vụ hàng ngày, từ bán vé đến báo cáo doanh thu, góp phần nâng cao hiệu quả kinh doanh và trải nghiệm của khách hàng.\nTrong vai trò là thành viên nhóm phát triển, tôi đã trực tiếp tham gia vào việc xây dựng các module chức năng của ứng dụng. Cụ thể, tôi chịu trách nhiệm thiết kế và lập trình giao diện người dùng cho các form quản lý lịch chiếu và bán vé, đồng thời xây dựng các logic xử lý nghiệp vụ liên quan. Ngoài ra, tôi cũng tham gia vào việc kết nối ứng dụng với cơ sở dữ liệu, đảm bảo dữ liệu được lưu trữ và truy xuất một cách chính xác và hiệu quả. Thông qua dự án này, tôi đã củng cố vững chắc kỹ năng lập trình C# trên nền tảng .NET WinForms, rèn luyện khả năng làm việc nhóm và hiểu sâu hơn về quy trình phát triển một ứng dụng desktop hoàn chỉnh.\nĐiểm học phần: 4.0/4.0\nHỗ Trợ Luyện Thi Bằng Lái Xe #\rHọc Phần Công Nghệ Phần Mềm - Tháng 5 Năm 2025 - Tháng 6 Năm 2025 #\rGithub Dự Án\r\u0026ldquo;Ứng dụng Hỗ Trợ Luyện Thi Bằng Lái Xe\u0026rdquo; là một nền tảng học tập trực tuyến nhằm hỗ trợ học viên ôn luyện và chuẩn bị tốt nhất cho kỳ thi lý thuyết lái xe. Với giao diện thân thiện và tính năng đa dạng, ứng dụng giúp người học nắm vững kiến thức giao thông, làm quen với các câu hỏi thi thật và tự tin vượt qua kỳ thi ngay từ lần đầu tiên.\nTrong vai trò là thành viên nhóm phát triển, tôi đã đóng góp vào dự án thông qua việc xây dựng và triển khai một số API phục vụ cho các chức năng chính của ứng dụng. Cụ thể, tôi đã phát triển các endpoint để xử lý dữ liệu ,tích hợp các tính năng backend cần thiết, kết nối với hệ thống cơ sơ dữ liệu. Ngoài ra, tôi cũng tham gia phát triển một số chức năng giao diện người dùng, đảm bảo sự tương tác mượt mà giữa front-end và back-end. Thông qua công việc này, tôi đã nâng cao kỹ năng lập trình, làm việc nhóm và hiểu rõ hơn về quy trình phát triển phần mềm thực tế.\nĐiểm học phần: 4.0/4.0\nKỹ Năng #\r- Tự học ★★★★★ #\r- Sáng tạo ★★★☆☆ #\r- Quản lý thời gian ★★★★☆ #\r- Giải quyết vấn đề ★★★★☆ #\r- Làm Việc Nhóm ★★★★☆ #\r- Kỹ Năng Giao Tiếp ★★★☆☆ #\rBằng Cấp Và Chứng Chỉ #\r","externalUrl":null,"permalink":"/phandinhtuan.dev/resume/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/phandinhtuan.dev/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/phandinhtuan.dev/series/","section":"Series","summary":"","title":"Series","type":"series"}]